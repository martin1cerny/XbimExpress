<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Xbim.Common;
using System.Linq;

namespace <#= Namespace #>
{
	public partial class <#= Name #> : ITranslator
	{
		private readonly byte[] _translatesProperties = new byte[]{<#= string.Join(", ", TranslatesProperties.Select(p => p.ToString())) #>};
		
		public string OriginalSchema { get { return <#= OriginalSchema #>;} }
		public string TranslatesEntity { get { return <#= TranslatesEntity #>;} }
		public byte[] TranslatesProperties { get { return _translatesProperties;} }

		//this function returns entity name in target schema
		public string TranslateEntity()
		{
			
		}

		//this function translates different data types, different order etc.
		void Parse(int propIndex, IPropertyValue value, int[] nested, ParseDelegate parse)
		{
			if(!_translatesProperties.Contains(propIndex))
			{
				//just use delegate function if there is no spacial handling for this property
				parse(propIndex, value, nested);
				return;
			}


		}
	}
}
