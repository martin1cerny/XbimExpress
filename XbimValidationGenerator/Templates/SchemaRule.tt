<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# foreach(var u in Using) {#>
using <#= u #>;
<# } #>
//## Custom usings
//##

// ReSharper disable InconsistentNaming
namespace <#= Namespace #>
{
	public class <#= Name #>: SchemaRule
	{
		private <#= Rules.Type #> _value;

		public <#= Name #>()
		{
			ForType = typeof(<#= Rules.Type #>);
		}
		
        public override IEnumerable<ErrorMessage> Validate(IPersist obj)
        {
			if(!(obj is <#= Rules.Type #>))
				throw new ArgumentException("Argument must be of type <#= Rules.Type #>", "obj");
			
			_value = (<#= Rules.Type #>)obj;

<# foreach(var rule in Rules.WhereRules) {#>
			if(!<#= rule.Name #>())
				yield return <#= GetErr(rule) #>;
<# } #>
        }

<# foreach(var rule in Rules.WhereRules) {#>
		/// <summary>
<#= GetDescription(rule) #>		
        /// </summary>
		private bool <#= rule.Name #>()
		{
<#= GetDefinition(rule) #>	
<#	string eType;
	   if(rule.Name == "CorrectTypeAssigned" && GetElementType(rule, out eType)) {#>
			var typedBy = _value.IsTypedBy.ToList();
		    return !_value.IsTypedBy.Any() || typedBy.All(r => r.RelatingType is <#= eType #>);
<# } else if (rule.Name == "CorrectPredefinedType" && GetPredefinedType(rule, out eType)) { #>	
			return 
<# if (!Rules.Type.EndsWith("Type")) { #>
				_value.PredefinedType == null || 
<# } #>
                _value.PredefinedType != <#= GetPredefinedTypeNamespace(eType) #>.<#= eType #>.USERDEFINED ||
		        _value.<#= GetUserDefinedType(rule) #> != null;
<# } else { #>	
			//## <#= rule.Name #> implementation
			//TODO: Implement <#= rule.Name #> rule for <#= Rules.Type #>
            throw new NotImplementedException();
			//##
<# } #>
		}
<# } #>
		
		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}