<#@ template language="C#" inherits="EntityTemplate"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Xbim.CodeGeneration.Helpers" #>
<#@ import namespace="Xbim.ExpressParser.SDAI" #>

<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>
//## Custom using statements
//##

namespace <#= InterfaceNamespace #>
{
	/// <summary>
    /// Readonly interface for <#= Name #>
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @I<#= Name #> <#= InterfaceInheritance #>
	{
<#	foreach(var attribute in ExplicitAttributes){ #>
		<#= GetInterfaceCSType(attribute) #> @<#= attribute.Name #> { get; <# if (!IsAggregation(attribute)) {#> set; <# } #>}
<#	} #>
<#	foreach(var attribute in InverseAttributes){  
		var inverseType = "I" + attribute.Domain.Name; #>
<#		if (IsEnumeration(attribute)) { #>
		IEnumerable<<#=inverseType #>> @<#= attribute.Name #> {  get; }
<#		} else { #>
		<#=inverseType #> @<#= attribute.Name #> {  get; }
<#		} #>
<#	} #>
<#	foreach(var attribute in DerivedAttributes.Where(a => !IsOverwritting(a) && !IsIgnored(a))){ #>
		<#= GetCSType(attribute) #> @<#= attribute.Name #>  { get ; }
<#		} #>	
	}
}

namespace <#= Namespace #>
{
	[ExpressType("<#= Type.PersistanceName #>", <#= Type.TypeId #>)]
	// ReSharper disable once PartialTypeWithSinglePart
	public <#= AbstractKeyword #> partial class @<#= Name #> <#= Inheritance #>, IEquatable<@<#= Name #>>
	{
		#region I<#= Name #> explicit implementation
<# foreach(var attribute in ExplicitAttributes){ #>
		<#= GetInterfaceCSType(attribute) #> I<#= Name #>.<#= attribute.Name #> { 
<# if (!IsAggregation(attribute)) { 
	  var type = ((AggregationType)attribute.Domain).ElementType;
	  var outerType = GetInterfaceCSType(type);
	  var innerType = GetCSType(type);
		if(innerType != outerType){ #>
			get { return new Xbim.Common.Collections.ProxyItemSet<<#= innerType #>, <#= outerType #>>( @<#= attribute.Name #>); } 
<#	   } else { #>
			get { return @<#= attribute.Name #>; } 
<#	   }#>
<# } else {#> 
<#		if (IsEntityOrSelect(attribute)) {#> 
			get { return @<#= attribute.Name #>; } 
			set { <#= attribute.Name #> = value as <#= GetCSType(attribute) #>;}
<#		}  else {#>
			get { return @<#= attribute.Name #>; } 
			set { <#= attribute.Name #> = value;}
<#		} #>
<# } #>
		}	
<# } #>		 
<#	foreach(var attribute in InverseAttributes){  
		var inverseType = "I" + attribute.Domain.Name; #>
<#		if (IsEnumeration(attribute)) { #>
		IEnumerable<<#=inverseType #>> I<#= Name #>.<#= attribute.Name #> {  get { return @<#= attribute.Name #>; } }
<#		} else { #>
		<#=inverseType #> I<#= Name #>.<#= attribute.Name #> {  get { return @<#= attribute.Name #>; } }
<#		}
	} #>
		#endregion

<# if (IsFirst) {#>
		#region Implementation of <#= PersistEntityInterface #>

		public int EntityLabel {get; internal set;}
		
		public <#= ModelInterface #> Model { get; internal set; }

		/// <summary>
        /// This property is deprecated and likely to be removed. Use just 'Model' instead.
        /// </summary>
		[Obsolete("This property is deprecated and likely to be removed. Use just 'Model' instead.")]
        public <#= ModelInterface #> ModelOf { get { return Model; } }
		
	    internal ActivationStatus ActivationStatus = ActivationStatus.NotActivated;

	    ActivationStatus <#= PersistEntityInterface #>.ActivationStatus { get { return ActivationStatus; } }
		
		void <#= PersistEntityInterface #>.Activate(bool write)
		{
			switch (ActivationStatus)
		    {
		        case ActivationStatus.ActivatedReadWrite:
		            return;
		        case ActivationStatus.NotActivated:
		            lock (this)
		            {
                        //check again in the lock
		                if (ActivationStatus == ActivationStatus.NotActivated)
		                {
		                    if (Model.Activate(this, write))
		                    {
		                        ActivationStatus = write
		                            ? ActivationStatus.ActivatedReadWrite
		                            : ActivationStatus.ActivatedRead;
		                    }
		                }
		            }
		            break;
		        case ActivationStatus.ActivatedRead:
		            if (!write) return;
		            if (Model.Activate(this, true))
                        ActivationStatus = ActivationStatus.ActivatedReadWrite;
		            break;
		        default:
		            throw new ArgumentOutOfRangeException();
		    }
		}

		void <#= PersistEntityInterface #>.Activate (Action activation)
		{
			if (ActivationStatus != ActivationStatus.NotActivated) return; //activation can only happen once in a lifetime of the object
			
			activation();
			ActivationStatus = ActivationStatus.ActivatedRead;
		}

		ExpressType <#= PersistEntityInterface #>.ExpressType { get { return Model.Metadata.ExpressType(this);  } }
		#endregion

<# } #>
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal <#= Name #>(<#= ModelInterface #> model) <# if (!IsFirst) {#>: base(model) <# } #>
		{ 
			Model = model; 
<# foreach (var attribute in AggregatedExplicitAttributes){ #>
			<#= GetPrivateFieldName(attribute) #> = new <#= GetCSType(attribute) #>( this, <#= GetUpperBound(attribute) #>,  <#= GetAttributeOrder(attribute) #>);
<# } #>
		}

<# if (ExplicitAttributes.Any()) {#>
		#region Explicit attribute fields
<# foreach(var attribute in ExplicitAttributes){ #>
		private <#= GetCSType(attribute) #> <#= GetPrivateFieldName(attribute) #>;
<# } #>
		#endregion
	
		#region Explicit attribute properties
<# foreach(var attribute in ExplicitAttributes){ #>
<# if (IsPartOfInverse(attribute)) { #>
		[IndexedProperty]
<# } #>
		[EntityAttribute(<#= GetAttributeOrder(attribute) #>, <#= GetAttributeState(attribute) #>, <#= GetAttributeType(attribute) #>, <#= GetAttributeMemberType(attribute) #>, <#= GetAttributeMinCardinality(attribute) #>, <#= GetAttributeMaxCardinality(attribute) #>, <#= GetAttributeGlobalOrder(attribute) #>)]
		public <#= IsOverridenAttribute(attribute) ? "virtual " : ""#><#= GetCSType(attribute) #> @<#= attribute.Name #> 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return <#= GetPrivateFieldName(attribute) #>;
				((<#= PersistEntityInterface #>)this).Activate(false);
				return <#= GetPrivateFieldName(attribute) #>;
			} 
<# if (!(attribute.Domain is AggregationType)) { #>
			set
			{
				SetValue( v =>  <#= GetPrivateFieldName(attribute) #> = v, <#= GetPrivateFieldName(attribute) #>, value,  "<#= attribute.Name #>", <#= GetAttributeOrder(attribute) #>);
			} 
<# } #>
		}	
<# } #>
		#endregion
<# } #>

<# if (OverridingAttributes.Any()) { #>
		#region Overriding attributes
<#		foreach(var attribute in OverridingAttributes){ 
			var accessor = GetDerivedAccess(attribute); #>
		[EntityAttribute(<#= GetAttributeOrder(attribute) #>, <#= GetAttributeState(attribute) #>, <#= GetAttributeType(attribute) #>, <#= GetAttributeMemberType(attribute) #>, <#= GetAttributeMinCardinality(attribute) #>, <#= GetAttributeMaxCardinality(attribute) #>, <#= GetAttributeGlobalOrder(attribute) #>)]
		public override <#= GetCSType(attribute) #> @<#= attribute.Name #> 
		{
			get 
			{
<#			if (accessor != null) { #>
				<#= accessor #>
<#			} else { #>
				//## Overriding derived attribute <#= attribute.Name #> getter
				//TODO: Implement overriding derived attribute <#= attribute.Name #> getter
				//##
<#			}  #>
			}
			set 
			{ 
				throw new System.Exception("It is not possible to set a value of derived property <#= attribute.Name #> in <#= Name #>"); 
			}
		}
<#		} #>
		#endregion
<# } #>

<# if (DerivedAttributes.Any()) { #>
		#region Derived attributes
<#		foreach(var attribute in DerivedAttributes){ #>
		[EntityAttribute(<#= GetAttributeOrder(attribute) #>, <#= GetAttributeState(attribute) #>, <#= GetAttributeType(attribute) #>, <#= GetAttributeMemberType(attribute) #>, <#= GetAttributeMinCardinality(attribute) #>, <#= GetAttributeMaxCardinality(attribute) #>, <#= GetAttributeGlobalOrder(attribute) #>)]
		public <#= GetDerivedKeyword(attribute) #><#= GetCSType(attribute) #> @<#= attribute.Name #> 
		{
			get 
			{
				//## Getter for <#= attribute.Name #>
				//TODO: Implement getter for derived attribute <#= attribute.Name #>
				throw new NotImplementedException();
				//##
			}
		}

<#		} #>
		#endregion
<# } #>

<# if (InverseAttributes.Any()) {#>
		#region Inverse attributes
<# foreach(var attribute in InverseAttributes){  
	var inverseType = attribute.Domain.Name; #>
		[InverseProperty("<#= attribute.InvertedAttr.Name #>")]
		[EntityAttribute(<#= GetAttributeOrder(attribute) #>, <#= GetAttributeState(attribute) #>, <#= GetAttributeType(attribute) #>, <#= GetAttributeMemberType(attribute) #>, <#= GetAttributeMinCardinality(attribute) #>, <#= GetAttributeMaxCardinality(attribute) #>, <#= GetAttributeGlobalOrder(attribute) #>)]
<# if (IsEnumeration(attribute)) { #>
		public IEnumerable<<#=inverseType #>> @<#= attribute.Name #> 
<# } else { #>
		public <#=inverseType #> @<#= attribute.Name #> 
<# } #>
		{ 
			get 
			{
<# if (IsDoubleAggregation(attribute)) {#>
				return Model.Instances.<#= IsEnumeration(attribute) ? "Where" : "FirstOrDefault" #><<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> != null &&  e.<#= attribute.InvertedAttr.Name #>.Any( i => i.Contains(this)), "<#= attribute.InvertedAttr.Name #>", this);
<# } else if (IsAggregation(attribute)){#>
				return Model.Instances.<#= IsEnumeration(attribute) ? "Where" : "FirstOrDefault" #><<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> != null &&  e.<#= attribute.InvertedAttr.Name #>.Contains(this), "<#= attribute.InvertedAttr.Name #>", this);
<# } else {#>
				return Model.Instances.<#= IsEnumeration(attribute) ? "Where" : "FirstOrDefault" #><<#= inverseType #>>(e => Equals(e.<#= attribute.InvertedAttr.Name #>), "<#= attribute.InvertedAttr.Name #>", this);
<# } #>
			} 
		}
<# } #>
		#endregion
<# } #>

<# if (IsFirst) { #>
		#region INotifyPropertyChanged implementation
		 
		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName, byte propertyOrder)
		{
			//activate for write if it is not activated yet
			if (ActivationStatus != ActivationStatus.ActivatedReadWrite)
				((<#= PersistEntityInterface #>)this).Activate(true);

			//just set the value if the model is marked as non-transactional
			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action doAction = () => {
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
			};
			Action undoAction = () => {
				setter(oldValue);
				NotifyPropertyChanged(notifyPropertyName);
			};
			doAction();

			//do action and THAN add to transaction so that it gets the object in new state
			txn.AddReversibleAction(doAction, undoAction, this, ChangeType.Modified, propertyOrder);
		}

		#endregion
<# } #>

		#region <#= PersistInterface #> implementation
		public <#= VirtualOverrideKeyword #> void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
<#	if (AllExplicitAttributes.Any()) { #>
			switch (propIndex)
			{
<#		if (ParentAttributes.Any()){
            foreach (var attribute in ParentAttributes)
            { #>
				case <#= GetAttributeIndex(attribute) #>: 
<#          } #>
					base.Parse(propIndex, value, nestedIndex); 
					return;
<#
		}
		foreach (var attribute in ExplicitAttributes) { #>
				case <#= GetAttributeIndex(attribute) #>: 
<#			if (IsEntityOrSelectAggregation(attribute)) { #>
					<#= GetPrivateFieldName(attribute) #>.InternalAdd((<#= GetAggregationElementType(attribute) #>)value.EntityVal);
					return;
<#				continue;
			} 
			if(attribute.Domain is EntityDefinition || attribute.Domain is SelectType){ #>
					<#= GetPrivateFieldName(attribute) #> = (<#= GetCSType(attribute) #>)(value.EntityVal);
					return;
<#				continue;
			}
			var enumType = attribute.Domain as EnumerationType;
			if(enumType != null){ #>
                    <#= GetPrivateFieldName(attribute) #> = (<#= enumType.Name #>) System.Enum.Parse(typeof (<#= enumType.Name #>), value.EnumVal, true);
					return;
<#			continue;
			}
			if (IsComplexDefinedType(attribute)){
				var varName = GetPrivateFieldName(attribute).Trim('_');
				if(attribute.OptionalFlag) { #>
					if (!<#= GetPrivateFieldName(attribute) #>.HasValue) <#= GetPrivateFieldName(attribute) #> = new <#= GetCSTypeNN(attribute) #>();
			        var <#= varName #> = <#= GetPrivateFieldName(attribute) #>.Value;
					<#= GetCSTypeNN(attribute) #>.Add(ref <#= varName #>, value.<#= GetPropertyValueMember(attribute.Domain) #>);
					<#= GetPrivateFieldName(attribute) #> = <#= varName #>;
					return;
<#					continue;
                }
				else
                {#>
					var <#= varName #> = <#= GetPrivateFieldName(attribute) #>;
					<#= GetCSTypeNN(attribute) #>.Add(ref <#= varName #>, value.<#= GetPropertyValueMember(attribute.Domain) #>);
					<#= GetPrivateFieldName(attribute) #> = <#= varName #>;
					return;
<#				}
			}
			if (IsSimpleOrDefinedType(attribute)){#>
					<#= GetPrivateFieldName(attribute) #> = value.<#= GetPropertyValueMember(attribute.Domain) #>;
					return;
<#				continue;
			}
			if (IsSimpleOrDefinedTypeAggregation(attribute)){#>
					<#= GetPrivateFieldName(attribute) #>.InternalAdd(value.<#= GetPropertyValueMember(attribute.Domain) #>);
					return;
<#				continue;
			}
			if (IsNestedAggregation(attribute)){
				var levels = GetLevelOfNesting(attribute); #>
					<#= GetPrivateFieldName(attribute) #>
<#                     for (int i = 0; i < levels; i++)
                       {#>
						.InternalGetAt(nestedIndex[<#= i #>])
<#                     } #>
						.InternalAdd((<#= GetAggregationElementType(attribute) #>)(value.<#= GetPropertyValueMember(attribute.Domain) #>));
					return;
<#				continue;
			}#>
					throw new System.NotImplementedException("<#= string.Format("{0} in {1} is a special case of nested lists. It is not implemented for now.", attribute.Name, Name) #>");
<#			Console.WriteLine("Parsing code wasn't generated for attribute " + attribute.Name + " of type "+ GetCSType(attribute) +" in entity " + Name);
			
		}#>
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
<#	} else { #>
			//there are no attributes defined for this entity
            throw new System.IndexOutOfRangeException("There are no attributes defined for this entity");
<#	}#>
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@<#= Name #> other)
	    {
	        return this == other;
	    }

	    public override bool Equals(object obj)
        {
            // Check for null
            if (obj == null) return false;

            // Check for type
            if (GetType() != obj.GetType()) return false;

            // Cast as @<#= Name #>
            var root = (@<#= Name #>)obj;
            return this == root;
        }
        public override int GetHashCode()
        {
            //good enough as most entities will be in collections of  only one model, equals distinguishes for model
            return EntityLabel.GetHashCode(); 
        }

        public static bool operator ==(@<#= Name #> left, @<#= Name #> right)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(left, right))
                return true;

            // If one is null, but not both, return false.
            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return false;

            return (left.EntityLabel == right.EntityLabel) && (left.Model == right.Model);

        }

        public static bool operator !=(@<#= Name #> left, @<#= Name #> right)
        {
            return !(left == right);
        }

<#  var selects = Type.IsInSelects.Select(s => s.Name.ToString());
    foreach (var @select in selects)
	{
#>
        public static bool operator ==(@<#= Name #> left, <#= @select #> right)
		{
			return left == right as @<#= Name #>;
		}

		public static bool operator !=(@<#= Name #> left, <#= @select #> right)
		{
			return !(left == right);
		}

<#	} #>
        #endregion

<# if(Type.Instantiable && AllExplicitAttributes.Any(a => IsEntityRefOrAggr(a))) { #>
		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
<#		foreach (var attribute in AllExplicitAttributes) { 
			if (IsEntityReference(attribute)) {#>
				if (@<#= attribute.Name #> != null)
					yield return @<#= attribute.Name #>;
<#			}
			else if (IsEntityReferenceAggregation(attribute)) {#>
				foreach(var entity in @<#= attribute.Name #>)
					yield return entity;
<#			} 
			//Fix for IFC4 IfcRelDefinesByProperties where select might be Entity or DefinedType which is List<Entity>
			else if (attribute.Name == "RelatingPropertyDefinition" && attribute.Domain is SelectType) {#>
				if(RelatingPropertyDefinition != null)
					foreach (var definition in RelatingPropertyDefinition.PropertySetDefinitions)
						yield return definition;
<#			} 
			else if (IsEntityReferenceDoubleAggregation(attribute))
            { #>
				foreach (var item in @<#= attribute.Name #>)
					foreach (var entity in item)
						yield return entity;
<#			}
			else if (IsEntityRefOrAggr(attribute)) {  
				throw new NotSupportedException();
			} #>
<#		} #>
			}
		}
		#endregion

<#		var indexedAttributes = AllExplicitAttributes.Where(a => IsPartOfInverse(a)).ToList();
		if (indexedAttributes.Any()) { #>

		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
<#		foreach (var attribute in indexedAttributes) { 
			if (IsEntityReference(attribute)) {#>
				if (@<#= attribute.Name #> != null)
					yield return @<#= attribute.Name #>;
<#			}
			else if (IsEntityReferenceAggregation(attribute)) {#>
				foreach(var entity in @<#= attribute.Name #>)
					yield return entity;
<#			} 
			//Fix for IFC4 IfcRelDefinesByProperties where select might be Entity or DefinedType which is List<Entity>
			else if (attribute.Name == "RelatingPropertyDefinition" && attribute.Domain is SelectType) {#>
				if(RelatingPropertyDefinition != null)
					foreach (var definition in RelatingPropertyDefinition.PropertySetDefinitions)
						yield return definition;
<#			} 
			else { throw new NotSupportedException(); } #>
<#		} #>				
			} 
		}
		#endregion

<#		} #>
<#	} #>
		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}