<#@ template language="C#" inherits="EntityTemplate"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

namespace <#= Namespace #>
{
	public partial interface I<#= Name #> <#= Inheritance #>
	{
		#region Explicit attributes
<# foreach(var attribute in ExplicitAttributes){ #>
		<#= GetCSType(attribute) #> @<#= attribute.Name #>  { get; set; }
<# } #>
		#endregion

		#region Inverse attributes
<# foreach(var attribute in InverseAttributes){   var inverseType = "I" + attribute.Domain.Name; #>
		IEnumerable<<#=inverseType #>> @<#= attribute.Name #>  { get; }
<# } #>
		#endregion
	}

<# if (!IsAbstract) { #>
	[EntityName("<#= Type.PersistanceName #>")]
	public partial class @<#= Name #> : I<#= Name #>
	{
		#region Implementation of <#= PersistEntityInterface #>
		public int EntityLabel {get; set;}
		public <#= ModelInterface #> Model { get; internal set; }

		protected bool Activated = false;
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal <#= Name #>(<#= ModelInterface #> model)
		{ 
			Model = model; 
<# foreach (var attribute in AggregatedExplicitAttributes){ #>
			<#= GetPrivateFieldName(attribute) #> = new <#= GetCSType(attribute) #>( model );
<# } #>
		}

		#region Explicit attribute fields
<# foreach(var attribute in AllExplicitAttributes){ #>
		private <#= GetCSType(attribute) #> <#= GetPrivateFieldName(attribute) #>;
<# } #>
		#endregion
	
		#region Explicit attribute properties
<# foreach(var attribute in AllExplicitAttributes){ #>
		[EntityAttribute(<#= GetAttributeIndex(attribute) #>, EntityAttributeState.<#= attribute.OptionalFlag ? "Optional" : "Mandatory" #>)]
		public <#= GetCSType(attribute) #> @<#= attribute.Name #> 
		{ 
			get 
			{
				if(Activated) return <#= GetPrivateFieldName(attribute) #>;
				
				Model.Activate(this, true);
				Activated = true;
				return <#= GetPrivateFieldName(attribute) #>;
			} 
			set
			{
				SetValue( v =>  <#= GetPrivateFieldName(attribute) #> = v, <#= GetPrivateFieldName(attribute) #>, value,  "<#= attribute.Name #>");
			} 
		}
	
<# } #>
		#endregion

		#region Inverse attributes
<# foreach(var attribute in AllInverseAttributes){  
	var inverseType = "I" + attribute.Domain.Name; #>
		public IEnumerable<<#= inverseType #>> @<#= attribute.Name #> 
		{ 
			get 
			{
<# if (IsDoubleAggregation(attribute)) {#>
				return Model.Instances.Where<<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> != null &&  e.<#= attribute.InvertedAttr.Name #>.Any( i => i.Contains(this)));
<# } else if (IsAggregation(attribute)){#>
				return Model.Instances.Where<<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> != null &&  e.<#= attribute.InvertedAttr.Name #>.Contains(this));
<# } else {#>
				return Model.Instances.Where<<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> == this);
<# } #>
			} 
		}
	
<# } #>
		#endregion

		#region INotifyPropertyChanged implementation

		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName)
		{

			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action undo = () => setter(oldValue);
			txn.AddReversibleAction(undo);
			setter(newValue);
			NotifyPropertyChanged(notifyPropertyName);
		}

		#endregion

		#region Index access
		private readonly List<string> _attributeNames = new List<string>
		{
<# foreach(var attribute in AllExplicitAttributes){ #>
			"<#= attribute.Name #>",
<# } #>
		};

		IEnumerable<string> <#= InstantiableInterface #>.PropertyNames { get { return _attributeNames; } }

		object <#= InstantiableInterface #>.GetValue(int index)
		{
			switch(index)
			{
<# foreach(var attribute in AllExplicitAttributes){ #>
				case <#= GetAttributeIndex(attribute) #>: 
					return @<#= attribute.Name #>;
<# } #>
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object <#= InstantiableInterface #>.GetValue(string name)
		{
			switch(name)
			{
<# foreach(var attribute in AllExplicitAttributes){ #>
				case "<#= attribute.Name #>":  
					return @<#= attribute.Name #>;
<# } #>
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void <#= InstantiableInterface #>.SetValue(int index, object value)
		{
			switch(index)
			{
<# foreach(var attribute in AllExplicitAttributes){ #>
				case <#= GetAttributeIndex(attribute) #>:
<#		if (IsReferenceTypeAggregation(attribute)) {#>
					 @<#= attribute.Name #>.Add((<#= GetAggregationElementType(attribute) #>)value);
<#		} else if (IsValueTypeAggregation(attribute)) {#>
					 @<#= attribute.Name #>.Add((<#= GetAggregationElementType(attribute) #>)value);
<#		} else if (IsReferenceType(attribute)) {#>
					 @<#= attribute.Name #> = (<#= GetCSType(attribute) #>)value;
<#		} else {#>
					 if (value != null) @<#= attribute.Name #> = (<#= GetCSType(attribute) #>)value;
<#		} #>
					 break;
<# } #>
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void <#= InstantiableInterface #>.SetValue(string propName, object value)
		{
			switch(propName)
			{
<# foreach(var attribute in AllExplicitAttributes){ #>
				case "<#= attribute.Name #>":
<#		if (IsReferenceTypeAggregation(attribute)) {#>
					 @<#= attribute.Name #>.Add((<#= GetAggregationElementType(attribute) #>)value);
<#		} else if (IsValueTypeAggregation(attribute)) {#>
					 @<#= attribute.Name #>.Add((<#= GetAggregationElementType(attribute) #>)value);
<#		} else if (IsReferenceType(attribute)) {#>
					 @<#= attribute.Name #> = (<#= GetCSType(attribute) #>)value;
<#		} else {#>
					 if (value != null) @<#= attribute.Name #> = (<#= GetCSType(attribute) #>)value;
<#		} #>
					 break;
<# } #>
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion

<# if (WhereRules.Any()) { #>
		#region Where rules
<# foreach (var rule in WhereRules) {#>
		/*<#= rule.Description #>*/
<# } #>
		#endregion
<# } #>
	}

<# } #>

}