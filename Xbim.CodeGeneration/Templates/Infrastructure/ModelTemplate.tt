<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Xbim.Common.Step21;

namespace <#= Namespace #>
{
	public interface <#= Name #>
	{
		IStepFileHeader Header { get; }

		bool IsTransactional { get; }

	    <#= _settings.EntityCollentionInterface  #> Instances { get; }

	    int Activate(<#= _settings.PersistEntityInterface #> owningEntity, bool write);
		
		<#= _settings.TransactionInterface #> BeginTransaction(string name);
		
		/// <summary>
        /// It is a good practise to implement this property with WeakReference back field so it gets disposed 
		/// when transaction goes out of the scope. It would stay allive otherwise which is not desired unless you 
		/// want to keep it for undo-redo sessions. But even it that case it should be referenced from elsewhere.
        /// </summary>
		<#= _settings.TransactionInterface #> CurrentTransaction { get; }

		System.Reflection.Module SchemaModule { get; }
	}
}
