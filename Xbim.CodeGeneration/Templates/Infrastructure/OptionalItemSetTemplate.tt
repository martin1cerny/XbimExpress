<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System.Collections.Generic;
<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

namespace <#= Namespace #>
{
    public class <#= Name #><T>: <#= ItemSet #><T>, IOptional<#= ItemSet #><T>
    {
        internal <#= Name #>(IPersistEntity entity) : base(entity)
        {
            Initialized = false;
        }

        internal <#= Name #>(IPersistEntity entity, int capacity) : base(entity, capacity)
        {
            Initialized = false;
        }

        internal <#= Name #>(IPersistEntity entity, IEnumerable<T> collection) : base(entity, collection)
        {
            Initialized = false;
        }

        public bool Initialized { get; private set; }

        public void Initialize()
        {
            Initialized = true;
        }

        public void Uninitialize()
        {
            Clear();
            Initialized = false;
        }

        public override void Add(T item)
        {
            if (!Initialized) Initialized = true;
            base.Add(item);
        }
    }
}
