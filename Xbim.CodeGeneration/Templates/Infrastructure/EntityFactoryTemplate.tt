<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using Xbim.Common.Step21;
<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

namespace <#= Namespace #>
{
	public sealed class <#= Name #> <#= Inheritance #>
	{
		private readonly System.Reflection.Assembly _assembly;
		
		public <#= Name #>()
		{
			_assembly = GetType().Assembly;
		}

		public T New<T>(<#= ModelInterface #> model, int entityLabel, bool activated) where T: <#= InstantiableEntityInterface #>
		{
			return (T)New(model, typeof(T), entityLabel, activated);
		}

		public T New<T>(<#= ModelInterface #> model, Action<T> init, int entityLabel, bool activated) where T: <#= InstantiableEntityInterface #>
		{
			var o = New<T>(model, entityLabel, activated);
			init(o);
			return o;
		}

		public <#= InstantiableEntityInterface #> New(<#= ModelInterface #> model, Type t, int entityLabel, bool activated)
		{
			//check that the type is from this assembly
			if(t.Assembly != _assembly)
				throw new Exception("This factory only creates types from its assembly");

			return New(model, t.Name, entityLabel, activated);
		}

		public <#= InstantiableEntityInterface #> New(<#= ModelInterface #> model, string typeName, int entityLabel, bool activated)
		{
			if (model == null || typeName == null)
				throw new ArgumentNullException();

			var name = typeName.ToUpperInvariant();
			switch(name)
			{
<# foreach(var entity in NonAbstractEntities) {#>
				case "<#= entity.Name.ToUpper() #>": return new <#= entity.Name #> ( model, entityLabel, activated );
<#		if (entity.Name.ToUpper() != entity.PersistanceName.ToUpper()) { #>
				case "<#= entity.PersistanceName.ToUpper() #>": return new <#= entity.Name #> ( model, entityLabel, activated);
<#		} 
	} #>
				default:
					return null;
			}
		}
		public <#= InstantiableEntityInterface #> New(<#= ModelInterface #> model, int typeId, int entityLabel, bool activated)
		{
			if (model == null)
				throw new ArgumentNullException();

			switch(typeId)
			{
<# foreach(var entity in NonAbstractEntities) {#>
				case <#= entity.TypeId #>: return new <#= entity.Name #> ( model, entityLabel, activated );
<# } #>
				default:
					return null;
			}
		}

		public IExpressValueType New(string typeName)
		{
		if (typeName == null)
				throw new ArgumentNullException();

			var name = typeName.ToUpperInvariant();
			switch(name)
			{
<# foreach(var type in DefinedTypes) {#>
				case "<#= type.Name.ToUpper() #>": return new <#= type.Name #> ();
<#		if (type.Name.ToUpper() != type.PersistanceName.ToUpper()) { #>
				case "<#= type.PersistanceName.ToUpper() #>": return new <#= type.Name #> ();
<#		}
   } #>
				default:
					return null;
			}
		}

		private static readonly List<string> _schemasIds = new List<string> { <#= string.Join(", ", SchemasIds.Select(i => "\"" + i + "\"")) #> };
		public IEnumerable<string> SchemasIds { get { return _schemasIds; } }

		/// <summary>
        /// Gets the Ifc Schema version of the model if this is IFC schema
        /// </summary>
		public IfcSchemaVersion SchemaVersion { 
			get
			{
<# if (SchemasIds.Any(i => i == "IFC2X3")) { #>
				return IfcSchemaVersion.Ifc2X3;
<# } else if (SchemasIds.Any(i => i == "IFC4")) { #>
				return IfcSchemaVersion.Ifc4;
<# } else if (SchemasIds.Any(i => i == "COBIE_EXPRESS")) { #>
				return IfcSchemaVersion.Cobie2X4;
<#	} else { #>
				return IfcSchemaVersion.Unsupported;
<# } #>
			}
		}

	}
}
