<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

namespace <#= Namespace #>
{
	public static class EntityFactory
	{
		public static T New<T>(<#= ModelInterface #> model) where T: <#= PersistEntity #>
		{
			return (T)New(model, typeof(T));
		}

		public static T New<T>(<#= ModelInterface #> model, Action<T> init) where T: <#= PersistEntity #>
		{
			var o = New<T>(model);
			init(o);
			return o;
		}

		public static <#= PersistEntity #> New(<#= ModelInterface #> model, Type t)
		{
			return New(model, t.Name);
		}

		public static <#= PersistEntity #> New(<#= ModelInterface #> model, string typeName)
		{
			if (model == null || typeName == null)
				throw new ArgumentNullException();

			var name = typeName.ToUpper();
			switch(name)
			{
<# foreach(var entity in NonAbstractEntities) {#>
				case "<#= entity.Name.ToString().ToUpper() #>": return new <#= entity.Name #> {Model = model};
<# } #>
				default:
					throw new Exception("Type must be non-abstract type of <#= PersistEntity #>");
			}
		}
	}
}
