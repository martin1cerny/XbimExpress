// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Xbim.CodeGeneration.Templates.Infrastructure
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\AttributesTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class AttributesTemplate : AttributesTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\n\r\nnamespace ");
            
            #line 8 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\AttributesTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t[AttributeUsage(AttributeTargets.Class, Inherited = false)]\r\n    public sea" +
                    "led class EntityNameAttribute : Attribute\r\n    {\r\n        public EntityNameAttri" +
                    "bute(string name, int id)\r\n        {\r\n            Name = name;\r\n\t\t\tEntityTypeId " +
                    "= id;\r\n        }\r\n\r\n        public string Name { get; private set; }\r\n        pu" +
                    "blic int EntityTypeId { get; private set; }\r\n    }\r\n\r\n\t/// <summary>\r\n    ///   " +
                    "The scope of the entity attribute\r\n    /// </summary>\r\n    public enum EntityAtt" +
                    "ributeState\r\n    {\r\n        None = 0,\r\n        Optional = 1,\r\n        Mandatory," +
                    "\r\n        Derived,\r\n        DerivedOverride\r\n    }\r\n\r\n    public enum EntityAttr" +
                    "ibuteType\r\n    {\r\n        None = 0,\r\n        Class = 1,\r\n        Set,\r\n        E" +
                    "num,\r\n        List,\r\n        ListUnique = 100\r\n    }\r\n\r\n    /// <summary>\r\n    /" +
                    "// Indicates that this property plays a role in some inverse relation\r\n    /// <" +
                    "/summary>\r\n    [AttributeUsage(AttributeTargets.Property)]\r\n    public sealed cl" +
                    "ass IndexedProperty : Attribute\r\n    {\r\n    }\r\n\r\n    [AttributeUsage(AttributeTa" +
                    "rgets.Class)]\r\n    public sealed class IndexedClass : Attribute\r\n    {\r\n    }\r\n\r" +
                    "\n\r\n    [AttributeUsage(AttributeTargets.Property)]\r\n    public sealed class Enti" +
                    "tyAttributeAttribute : Attribute\r\n    {\r\n        private readonly EntityAttribut" +
                    "eState _state;\r\n        private readonly EntityAttributeType _entityType;\r\n     " +
                    "   private readonly int _order;\r\n        private readonly int _maxCardinality = " +
                    "-1;\r\n        private readonly int _minCardinality = -1;\r\n        private readonl" +
                    "y EntityAttributeType _memberType = EntityAttributeType.Class;\r\n\r\n        public" +
                    " EntityAttributeState State\r\n        {\r\n            get { return _state; }\r\n    " +
                    "    }\r\n\r\n        public EntityAttributeType EntityType\r\n        {\r\n            g" +
                    "et { return _entityType; }\r\n        }\r\n\r\n        public int Order\r\n        {\r\n  " +
                    "          get { return _order; }\r\n        }\r\n\r\n        public int MinCardinality" +
                    "\r\n        {\r\n            get { return _minCardinality; }\r\n        }\r\n\r\n        p" +
                    "ublic int MaxCardinality\r\n        {\r\n            get { return _maxCardinality; }" +
                    "\r\n        }\r\n\r\n        public EntityAttributeType MemberType\r\n        {\r\n       " +
                    "     get { return _memberType; }\r\n        }\r\n\r\n        public EntityAttributeAtt" +
                    "ribute()\r\n        {\r\n        }\r\n\r\n        public EntityAttributeAttribute(int or" +
                    "der, EntityAttributeState state)\r\n        {\r\n            _state = state;\r\n      " +
                    "      _order = order;\r\n            _entityType = EntityAttributeType.Class;\r\n   " +
                    "     }\r\n\r\n        public EntityAttributeAttribute(int order, EntityAttributeStat" +
                    "e state, EntityAttributeType entityType, EntityAttributeType memberType,\r\n      " +
                    "                      int minCardinality, int maxCardinality)\r\n        {\r\n      " +
                    "      _state = state;\r\n            _order = order;\r\n            _entityType = en" +
                    "tityType;\r\n            _memberType = memberType;\r\n            _minCardinality = " +
                    "minCardinality;\r\n            _maxCardinality = maxCardinality;\r\n        }\r\n\r\n   " +
                    "     public EntityAttributeAttribute(int order, EntityAttributeState state, Enti" +
                    "tyAttributeType entityType, int minCardinality,\r\n                            int" +
                    " maxCardinality)\r\n        {\r\n            _state = state;\r\n            _order = o" +
                    "rder;\r\n            _entityType = entityType;\r\n            _minCardinality = minC" +
                    "ardinality;\r\n            _maxCardinality = maxCardinality;\r\n        }\r\n\r\n       " +
                    " public EntityAttributeAttribute(int order, EntityAttributeState state, EntityAt" +
                    "tributeType entityType, int minCardinality)\r\n        {\r\n            _state = sta" +
                    "te;\r\n            _order = order;\r\n            _entityType = entityType;\r\n       " +
                    "     _minCardinality = minCardinality;\r\n        }\r\n\r\n        public EntityAttrib" +
                    "uteAttribute(int order, EntityAttributeState state, EntityAttributeType entityTy" +
                    "pe, EntityAttributeType memberType,\r\n                            int minCardinal" +
                    "ity)\r\n        {\r\n            _state = state;\r\n            _order = order;\r\n     " +
                    "       _entityType = entityType;\r\n            _memberType = memberType;\r\n       " +
                    "     _minCardinality = minCardinality;\r\n        }\r\n\r\n        public EntityAttrib" +
                    "uteAttribute(int order, EntityAttributeState state, EntityAttributeType entityTy" +
                    "pe)\r\n        {\r\n            _state = state;\r\n            _order = order;\r\n      " +
                    "      _entityType = entityType;\r\n        }\r\n\r\n        public EntityAttributeAttr" +
                    "ibute(int order, EntityAttributeState state, EntityAttributeType entityType, Ent" +
                    "ityAttributeType memberType)\r\n        {\r\n            _state = state;\r\n          " +
                    "  _order = order;\r\n            _entityType = entityType;\r\n            _memberTyp" +
                    "e = memberType;\r\n        }\r\n\r\n        public bool IsEnumerable\r\n        {\r\n     " +
                    "       get { return (_entityType == EntityAttributeType.List || _entityType == E" +
                    "ntityAttributeType.Set); }\r\n        }\r\n\r\n        public string ListType\r\n       " +
                    " {\r\n            get\r\n            {\r\n                switch (_entityType)\r\n      " +
                    "          {\r\n                    case EntityAttributeType.Set:\r\n                " +
                    "        return \"set\";\r\n                    case EntityAttributeType.List:\r\n     " +
                    "                   return \"list\";\r\n                    case EntityAttributeType." +
                    "ListUnique:\r\n                        return \"list-unique\";\r\n                    " +
                    "default:\r\n                        return \"\";\r\n                }\r\n            }\r\n" +
                    "        }\r\n\r\n        public bool IsSet\r\n        {\r\n            get { return (_en" +
                    "tityType == EntityAttributeType.Set); }\r\n        }\r\n\r\n        public bool IsList" +
                    "\r\n        {\r\n            get { return (_entityType == EntityAttributeType.List |" +
                    "| _entityType == EntityAttributeType.ListUnique); }\r\n        }\r\n\r\n        public" +
                    " bool IsClass\r\n        {\r\n            get { return (_entityType == EntityAttribu" +
                    "teType.Class); }\r\n        }\r\n\r\n        public bool IsDerivedOverride\r\n        {\r" +
                    "\n            get { return (_state == EntityAttributeState.DerivedOverride); }\r\n " +
                    "       }\r\n\r\n        public bool IsValueType\r\n        {\r\n            get { return" +
                    " (_entityType > EntityAttributeType.List); }\r\n        }\r\n\r\n\r\n        public bool" +
                    " IsMemberValueType\r\n        {\r\n            get { return (_memberType > EntityAtt" +
                    "ributeType.List); }\r\n        }\r\n\r\n        public bool IsMemberClass\r\n        {\r\n" +
                    "            get { return (_memberType == EntityAttributeType.Class); }\r\n        " +
                    "}\r\n\r\n        public bool IsOptional\r\n        {\r\n            get { return (_state" +
                    " == EntityAttributeState.Optional); }\r\n        }\r\n\r\n        public bool IsMandat" +
                    "ory\r\n        {\r\n            get { return (_state == EntityAttributeState.Mandato" +
                    "ry); }\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class AttributesTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
