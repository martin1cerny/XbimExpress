// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Xbim.CodeGeneration.Templates.Infrastructure
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ItemSetTemplate : ItemSetTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nus" +
                    "ing System.Collections.Specialized;\r\nusing System.ComponentModel;\r\nusing System." +
                    "Linq;\r\nusing System.Reflection;\r\n\r\n");
            
            #line 15 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
 foreach(var u in Using) { 
            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 16 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(u));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 17 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 19 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class ");
            
            #line 21 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("<T> : I");
            
            #line 21 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("<T>\r\n    {\r\n        private readonly List<T> _set;\r\n\r\n        private ");
            
            #line 25 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInterface));
            
            #line default
            #line hidden
            this.Write(" Model { get { return OwningEntity.Model; } }\r\n\r\n\t\tpublic ");
            
            #line 27 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PersistEntityInterface));
            
            #line default
            #line hidden
            this.Write(" OwningEntity { get; private set; }\r\n\r\n        protected List<T> Internal\r\n      " +
                    "  {\r\n            get { return _set; }\r\n        }\r\n\r\n\r\n        internal ");
            
            #line 35 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 35 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PersistEntityInterface));
            
            #line default
            #line hidden
            this.Write(" entity)\r\n        {\r\n            _set = new List<T>();\r\n\t\t\tOwningEntity = entity;" +
                    "\r\n        }\r\n\r\n\t\tinternal ");
            
            #line 41 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 41 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PersistEntityInterface));
            
            #line default
            #line hidden
            this.Write(" entity, int capacity)\r\n        {\r\n\t\t\t//this will create internal list of optimal" +
                    " capacity\r\n            _set = new List<T>(capacity > 0 ? capacity : 0);\r\n\t\t\tOwni" +
                    "ngEntity = entity;\r\n        }\r\n\r\n        internal ");
            
            #line 48 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 48 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PersistEntityInterface));
            
            #line default
            #line hidden
            this.Write(" entity, IEnumerable<T> collection)\r\n        {\r\n            _set = new List<T>(co" +
                    "llection);\r\n\t\t\tOwningEntity = entity;\r\n        }\r\n\r\n\t\t//this is to be only used " +
                    "internaly to add object outside of any transaction or event firing\r\n\t\t//that is " +
                    "typically during parsing operation\r\n\t\tinternal void InternalAdd(T value)\r\n\t\t{\r\n\t" +
                    "\t\tInternal.Add(value);\r\n\t\t}\r\n\r\n\t\t\r\n        public T InternalGetAt(int index)\r\n  " +
                    "      {\r\n            if (index < Count)\r\n                return this[index];\r\n\r\n" +
                    "            if (index > Count)\r\n                throw new Exception(\"It is not p" +
                    "ossible to get object which is more that just the next after the last one.\");\r\n " +
                    "           \r\n            if (!typeof (IList).IsAssignableFrom(typeof (T)))\r\n    " +
                    "            return default(T);\r\n\r\n            var result = (T) Activator.CreateI" +
                    "nstance(typeof (T), BindingFlags.NonPublic | BindingFlags.Instance, null,\r\n     " +
                    "           new object[] {OwningEntity}, null);\r\n            InternalAdd(result);" +
                    "\r\n            return result;\r\n\r\n        }\r\n\r\n        /// <summary>\r\n        /// " +
                    "This function makes it possible to add nested lists if this is the case.\r\n      " +
                    "  /// It works like InsertAt is the object doesn\'t exist already. You cannot cre" +
                    "ate lists with wholes.\r\n        /// </summary>\r\n        /// <param name=\"index\">" +
                    "Index of the object</param>\r\n        /// <returns>Object at specified index. If " +
                    "it is a nested list and it doesn\'t exist it gets created.</returns>\r\n        pub" +
                    "lic T GetAt(int index)\r\n        {\r\n            if (index < Count)\r\n             " +
                    "   return this[index];\r\n\r\n            if (index > Count)\r\n                throw " +
                    "new Exception(\"It is not possible to get object which is more that just the next" +
                    " after the last one.\");\r\n            \r\n            if (!typeof(IList).IsAssignab" +
                    "leFrom(typeof(T)))\r\n                return default(T);\r\n            \r\n          " +
                    "  var result = (T)Activator.CreateInstance(typeof(T), BindingFlags.NonPublic | B" +
                    "indingFlags.Instance, null, \r\n                new object[]{OwningEntity}, null);" +
                    "\r\n            Insert(index, result);\r\n            return result;\r\n        }\r\n\r\n " +
                    "       #region I");
            
            #line 103 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("<T> Members\r\n        public void AddRange(IEnumerable<T> values)\r\n\t\t{\r\n\t\t\tif(Mode" +
                    "l.IsTransactional && Model.CurrentTransaction == null)\r\n                throw ne" +
                    "w Exception(\"Operation out of transaction\");\r\n\t\t\t\r\n\t\t\t//activate owning entity f" +
                    "or write in case it is not active yet\r\n\t\t\tOwningEntity.Activate(true);\r\n\r\n      " +
                    "      var items = values as T[] ?? values.ToArray();\r\n\t\t\tAction doAction = () =>" +
                    " {\r\n\t\t\t\tInternal.AddRange(items);\r\n\t\t\t\tNotifyCollectionChanged(NotifyCollectionC" +
                    "hangedAction.Add, items);\r\n\t\t\t\tNotifyCountChanged();\r\n\t\t\t};\r\n\r\n\t\t\tdoAction();\r\n\r" +
                    "\n            if (!Model.IsTransactional) return;\r\n            \r\n            Acti" +
                    "on undoAction = () => {\r\n\t\t\t\tforeach(var value in items)\r\n\t\t\t\t\tInternal.Remove(v" +
                    "alue);\r\n\t\t\t\tNotifyCollectionChanged(NotifyCollectionChangedAction.Remove, items)" +
                    ";\r\n\t\t\t\tNotifyCountChanged();\r\n\t\t\t};\r\n\r\n            Model.CurrentTransaction.AddR" +
                    "eversibleAction(doAction, undoAction, OwningEntity, ChangeType.Modified);\r\n\t\t}\r\n" +
                    "\r\n        public T First\r\n        {\r\n            get { return Internal.First(); " +
                    "}\r\n        }\r\n\r\n        public T FirstOrDefault()\r\n        {\r\n            return" +
                    " Internal.FirstOrDefault();\r\n        }\r\n\r\n        public T FirstOrDefault(Func<T" +
                    ", bool> predicate)\r\n        {\r\n            return Internal.FirstOrDefault(predic" +
                    "ate);\r\n        }\r\n\r\n        public TF FirstOrDefault<TF>(Func<TF, bool> predicat" +
                    "e)\r\n        {\r\n            return OfType<TF>().FirstOrDefault(predicate);\r\n     " +
                    "   }\r\n\r\n        public IEnumerable<TW> Where<TW>(Func<TW, bool> predicate)\r\n    " +
                    "    {\r\n            return OfType<TW>().Where(predicate);\r\n        }\r\n\r\n        p" +
                    "ublic IEnumerable<TO> OfType<TO>()\r\n        {\r\n            return Internal.Count" +
                    " == 0 ? Enumerable.Empty<TO>() : Internal.OfType<TO>();\r\n        }\r\n        #end" +
                    "region\r\n\r\n        #region INotifyPropertyChanged Members\r\n\r\n        public event" +
                    " PropertyChangedEventHandler PropertyChanged;\r\n\r\n        private void NotifyCoun" +
                    "tChanged()\r\n        {\r\n            if (PropertyChanged == null) return;\r\n       " +
                    "     PropertyChanged(this, new PropertyChangedEventArgs(\"Count\"));\r\n        }\r\n\r" +
                    "\n        #endregion\r\n\r\n        #region INotifyCollectionChanged Members\r\n\r\n     " +
                    "   public event NotifyCollectionChangedEventHandler CollectionChanged;\r\n\t\t\r\n\t\tpr" +
                    "ivate void NotifyCollectionChanged(NotifyCollectionChangedAction action, T item)" +
                    "\r\n\t\t{\r\n\t\t\tif (CollectionChanged == null) return;\r\n\t\t\tCollectionChanged(this, new" +
                    " NotifyCollectionChangedEventArgs(action, item));\r\n\t\t}\r\n\r\n\t\tprivate void NotifyC" +
                    "ollectionChanged(NotifyCollectionChangedAction action, IEnumerable<T> items)\r\n\t\t" +
                    "{\r\n\t\t\tif (CollectionChanged == null) return;\r\n\t\t\tCollectionChanged(this, new Not" +
                    "ifyCollectionChangedEventArgs(action, items));\r\n\t\t}\r\n\r\n\t\tprivate void NotifyColl" +
                    "ectionChanged(NotifyCollectionChangedAction action)\r\n\t\t{\r\n\t\t\tif (CollectionChang" +
                    "ed == null) return;\r\n\t\t\tCollectionChanged(this, new NotifyCollectionChangedEvent" +
                    "Args(action));\r\n\t\t}\r\n\r\n        #endregion\r\n\r\n        #region ICollection<T> Memb" +
                    "ers\r\n\r\n        public virtual void Add(T item)\r\n        {\r\n            if(Model." +
                    "IsTransactional && Model.CurrentTransaction == null)\r\n                throw new " +
                    "Exception(\"Operation out of transaction\");\r\n\t\t\t\r\n\t\t\t//activate owning entity for" +
                    " write in case it is not active yet\r\n\t\t\tOwningEntity.Activate(true);\r\n\r\n\t\t\tActio" +
                    "n doAction = () => {\r\n\t\t\t\tInternal.Add(item);\r\n\t\t\t\tNotifyCollectionChanged(Notif" +
                    "yCollectionChangedAction.Add, item);\r\n\t\t\t\tNotifyCountChanged();\r\n\t\t\t};\r\n\r\n\t\t\tdoA" +
                    "ction();\r\n\r\n            if (!Model.IsTransactional) return;\r\n            \r\n     " +
                    "       Action undoAction = () => {\r\n\t\t\t\tInternal.Remove(item);\r\n\t\t\t\tNotifyCollec" +
                    "tionChanged(NotifyCollectionChangedAction.Remove, item);\r\n\t\t\t\tNotifyCountChanged" +
                    "();\r\n\t\t\t};\r\n\r\n            Model.CurrentTransaction.AddReversibleAction(doAction," +
                    " undoAction, OwningEntity, ChangeType.Modified);\r\n        }\r\n\r\n\r\n        public " +
                    "virtual void Clear()\r\n        {\r\n                        if (Model.IsTransaction" +
                    "al && Model.CurrentTransaction == null)\r\n                throw new Exception(\"Op" +
                    "eration out of transaction\");\r\n\r\n            OwningEntity.Activate(true);\r\n\r\n   " +
                    "         var oldItems = Internal.ToArray();\r\n            Action doAction = () =>" +
                    "\r\n            {\r\n                Internal.Clear();\r\n                NotifyCollec" +
                    "tionChanged(NotifyCollectionChangedAction.Reset);\r\n                NotifyCountCh" +
                    "anged();\r\n            };\r\n            doAction();\r\n\r\n            if (!Model.IsTr" +
                    "ansactional) return;\r\n\r\n            Action undoAction = () =>\r\n            {\r\n  " +
                    "              Internal.AddRange(oldItems);\r\n                NotifyCollectionChan" +
                    "ged(NotifyCollectionChangedAction.Add, oldItems);\r\n                NotifyCountCh" +
                    "anged();\r\n            };\r\n            Model.CurrentTransaction.AddReversibleActi" +
                    "on(doAction, undoAction, OwningEntity, ChangeType.Modified);\r\n        }\r\n\r\n     " +
                    "   public bool Contains(T item)\r\n        {\r\n            return Internal.Contains" +
                    "(item);\r\n        }\r\n\r\n        public void CopyTo(T[] array, int arrayIndex)\r\n   " +
                    "     {\r\n            Internal.CopyTo(array, arrayIndex);\r\n        }\r\n\r\n        pu" +
                    "blic int Count\r\n        {\r\n            get { return Internal.Count; }\r\n        }" +
                    "\r\n\r\n\r\n        public virtual bool Remove(T item)\r\n        {\r\n            if (Mod" +
                    "el.IsTransactional && Model.CurrentTransaction == null)\r\n                throw n" +
                    "ew Exception(\"Operation out of transaction\");\r\n\r\n            OwningEntity.Activa" +
                    "te(true);\r\n\r\n            var removed = Internal.Remove(item);\r\n            //don" +
                    "\'t do anything if nothing happened realy\r\n            if (!removed) return false" +
                    ";\r\n\t\t\t//raise events\r\n            NotifyCollectionChanged(NotifyCollectionChange" +
                    "dAction.Remove, item);\r\n            NotifyCountChanged();\r\n\r\n            if (!Mo" +
                    "del.IsTransactional) return true;\r\n\r\n            Action doAction = () =>\r\n      " +
                    "      {\r\n                Internal.Remove(item);\r\n                NotifyCollectio" +
                    "nChanged(NotifyCollectionChangedAction.Remove, item);\r\n                NotifyCou" +
                    "ntChanged();\r\n            };\r\n            Action undoAction = () =>\r\n           " +
                    " {\r\n                Internal.Add(item);\r\n                NotifyCollectionChanged" +
                    "(NotifyCollectionChangedAction.Add, item);\r\n                NotifyCountChanged()" +
                    ";\r\n            };\r\n            Model.CurrentTransaction.AddReversibleAction(doAc" +
                    "tion, undoAction, OwningEntity, ChangeType.Modified);\r\n            \r\n           " +
                    " return true;\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region IEnumerable<T>" +
                    " Members\r\n\r\n        public IEnumerator<T> GetEnumerator()\r\n        {\r\n          " +
                    "  return Internal.Count == 0 ? Enumerable.Empty<T>().GetEnumerator() : Internal." +
                    "GetEnumerator();\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region IEnumerable" +
                    " Members\r\n\r\n        IEnumerator IEnumerable.GetEnumerator()\r\n        {\r\n        " +
                    "    return Internal.Count == 0 ? Enumerable.Empty<T>().GetEnumerator() : Interna" +
                    "l.GetEnumerator();\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region ICollecti" +
                    "on<T> Members\r\n\r\n        void ICollection<T>.Add(T item)\r\n        {\r\n           " +
                    " Add(item);\r\n        }\r\n\r\n        void ICollection<T>.Clear()\r\n        {\r\n      " +
                    "      Clear();\r\n        }\r\n\r\n        bool ICollection<T>.Contains(T item)\r\n     " +
                    "   {\r\n            return Internal.Contains(item);\r\n        }\r\n\r\n        void ICo" +
                    "llection<T>.CopyTo(T[] array, int arrayIndex)\r\n        {\r\n            Internal.C" +
                    "opyTo(array, arrayIndex);\r\n        }\r\n\r\n        int ICollection<T>.Count\r\n      " +
                    "  {\r\n            get { return Count; }\r\n        }\r\n\r\n        bool ICollection<T>" +
                    ".IsReadOnly\r\n        {\r\n            get { return ((IList<T>)Internal).IsReadOnly" +
                    "; }\r\n        }\r\n\r\n        bool ICollection<T>.Remove(T item)\r\n        {\r\n       " +
                    "     return Remove(item);\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region IC" +
                    "ollection Members\r\n\r\n        void ICollection.CopyTo(Array array, int index)\r\n  " +
                    "      {\r\n            CopyTo((T[])array, index);\r\n        }\r\n\r\n        int IColle" +
                    "ction.Count\r\n        {\r\n            get { return Internal.Count; }\r\n        }\r\n\r" +
                    "\n        bool ICollection.IsSynchronized\r\n        {\r\n            get { return ((" +
                    "ICollection)Internal).IsSynchronized; }\r\n        }\r\n\r\n        object ICollection" +
                    ".SyncRoot\r\n        {\r\n            get { return ((ICollection)Internal).SyncRoot;" +
                    " }\r\n        }\r\n\r\n        #endregion\r\n\r\n\t\t#region IList<T> members\r\n\t\tpublic T th" +
                    "is[int index]\r\n\t\t{\r\n\t\t    get\r\n\t\t    {\r\n\t\t        return Internal[index];\r\n\t\t   " +
                    " }\r\n\t\t    set\r\n\t\t    {\r\n\t\t\t\tif(Model.IsTransactional && Model.CurrentTransaction" +
                    " == null)\r\n\t\t\t\t    throw new Exception(\"Operation out of transaction\");\r\n\r\n     " +
                    "           OwningEntity.Activate(true);\r\n\r\n\t\t\t\tvar oldValue = Internal[index];\r\n" +
                    "                Action doAction = () =>\r\n                {\r\n                    " +
                    "Internal[index] = value;\r\n                    NotifyCollectionChanged(NotifyColl" +
                    "ectionChangedAction.Replace, value);\r\n                };\r\n\r\n\t\t        doAction()" +
                    ";\r\n\r\n\t\t        if (!Model.IsTransactional) return;\r\n\r\n\t\t        Action undoActio" +
                    "n = () =>\r\n\t\t        {\r\n\t\t            Internal[index] = oldValue;\r\n             " +
                    "       NotifyCollectionChanged(NotifyCollectionChangedAction.Replace, oldValue);" +
                    "\r\n\t\t        };\r\n\t\t        \r\n\t\t\t\tModel.CurrentTransaction.AddReversibleAction(doA" +
                    "ction, undoAction, OwningEntity, ChangeType.Modified);\r\n\t\t    }\r\n\t\t}\r\n\r\n\t\tpublic" +
                    " int IndexOf(T item)\r\n\t\t{\r\n\t\t\treturn Internal.IndexOf(item);\r\n\t\t}\r\n\r\n\r\n        p" +
                    "ublic void Insert(int index, T item)\r\n        {\r\n            if (Model.IsTransac" +
                    "tional && Model.CurrentTransaction == null)\r\n                throw new Exception" +
                    "(\"Operation out of transaction\");\r\n\r\n            OwningEntity.Activate(true);\r\n\r" +
                    "\n            Action doAction = () =>\r\n            {\r\n                Internal.In" +
                    "sert(index, item);\r\n                NotifyCollectionChanged(NotifyCollectionChan" +
                    "gedAction.Add, item);\r\n                NotifyCountChanged();\r\n            };\r\n\t\t" +
                    "\tdoAction();\r\n\r\n            if (!Model.IsTransactional) return;\r\n\r\n            A" +
                    "ction undoAction = () =>\r\n            {\r\n                Internal.RemoveAt(index" +
                    ");\r\n                NotifyCollectionChanged(NotifyCollectionChangedAction.Remove" +
                    ", item);\r\n                NotifyCountChanged();\r\n            };\r\n            Mod" +
                    "el.CurrentTransaction.AddReversibleAction(doAction, undoAction, OwningEntity, Ch" +
                    "angeType.Modified);\r\n        }\r\n\r\n        public void RemoveAt(int index)\r\n     " +
                    "   {\r\n            var toRemove = Internal[index];\r\n            Remove(toRemove);" +
                    "\r\n        }\r\n        #endregion\r\n\r\n        #region IList members\r\n        int IL" +
                    "ist.Add(object value)\r\n        {\r\n            if (!(value is T)) return -1;\r\n\r\n " +
                    "           var v = (T) value;\r\n            Add(v);\r\n            return Internal." +
                    "Count - 1;\r\n        }\r\n\r\n        bool IList.Contains(object value)\r\n        {\r\n " +
                    "           return ((IList)Internal).Contains(value);\r\n        }\r\n\r\n        int I" +
                    "List.IndexOf(object value)\r\n        {\r\n            return ((IList)Internal).Inde" +
                    "xOf(value);\r\n        }\r\n\r\n        void IList.Insert(int index, object value)\r\n  " +
                    "      {\r\n            Insert(index, (T)value);\r\n        }\r\n\r\n        bool IList.I" +
                    "sFixedSize\r\n        {\r\n            get { return false; }\r\n        }\r\n\r\n        b" +
                    "ool IList.IsReadOnly\r\n        {\r\n            get { return Model.IsTransactional " +
                    "&& Model.CurrentTransaction != null; }\r\n        }\r\n\r\n        void IList.Remove(o" +
                    "bject value)\r\n        {\r\n            Remove((T)value);\r\n        }\r\n\r\n        obj" +
                    "ect IList.this[int index]\r\n        {\r\n            get\r\n            {\r\n          " +
                    "      return this[index];\r\n            }\r\n            set\r\n            {\r\n      " +
                    "          this[index] = value == null ? default(T) : (T)value;\r\n            }\r\n " +
                    "       }\r\n        #endregion\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class ItemSetTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
