// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Xbim.CodeGeneration.Templates.Infrastructure
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ItemSetTemplate : ItemSetTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nus" +
                    "ing System.Collections.Specialized;\r\nusing System.ComponentModel;\r\nusing System." +
                    "Linq;\r\n");
            
            #line 13 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
 foreach(var u in Using) { 
            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 14 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(u));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 15 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 17 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class ");
            
            #line 19 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("<T> : ICollection<T>, ICollection, INotifyCollectionChanged, INotifyPropertyChang" +
                    "ed\r\n    {\r\n        private readonly List<T> _set;\r\n        private readonly ");
            
            #line 22 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInterface));
            
            #line default
            #line hidden
            this.Write(" _model;\r\n\r\n        protected List<T> Internal\r\n        {\r\n            get { retu" +
                    "rn _set; }\r\n        }\r\n\r\n\r\n        public ");
            
            #line 30 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 30 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInterface));
            
            #line default
            #line hidden
            this.Write(" model)\r\n        {\r\n            _set = new List<T>();\r\n            _model = model" +
                    ";\r\n        }\r\n\r\n        public ");
            
            #line 36 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 36 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ItemSetTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInterface));
            
            #line default
            #line hidden
            this.Write(" model, IEnumerable<T> collection)\r\n        {\r\n            _set = new List<T>(col" +
                    "lection);\r\n            _model = model;\r\n        }\r\n\r\n        #region INotifyProp" +
                    "ertyChanged Members\r\n\r\n        public event PropertyChangedEventHandler Property" +
                    "Changed;\r\n\r\n        [NonSerialized]\r\n        private readonly PropertyChangedEve" +
                    "ntArgs _countPropChangedEventArgs =\r\n            new PropertyChangedEventArgs(\"C" +
                    "ount\");\r\n\r\n        private void NotifyCountChanged(int oldValue)\r\n        {\r\n   " +
                    "         var propChanged = PropertyChanged;\r\n            if (propChanged != null" +
                    " && oldValue != Internal.Count)\r\n                propChanged(this, _countPropCha" +
                    "ngedEventArgs);\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region INotifyColle" +
                    "ctionChanged Members\r\n\r\n        public event NotifyCollectionChangedEventHandler" +
                    " CollectionChanged;\r\n\r\n\r\n        #endregion\r\n\r\n        public T First\r\n        {" +
                    "\r\n            get { return Internal.First(); }\r\n        }\r\n\r\n        public T Fi" +
                    "rstOrDefault()\r\n        {\r\n            return Internal.FirstOrDefault();\r\n      " +
                    "  }\r\n\r\n        public T FirstOrDefault(Func<T, bool> predicate)\r\n        {\r\n    " +
                    "        return Internal.FirstOrDefault(predicate);\r\n        }\r\n\r\n        public " +
                    "TF FirstOrDefault<TF>(Func<TF, bool> predicate)\r\n        {\r\n            return O" +
                    "fType<TF>().FirstOrDefault<TF>(predicate);\r\n        }\r\n\r\n        public IEnumera" +
                    "ble<TW> Where<TW>(Func<TW, bool> predicate)\r\n        {\r\n            return OfTyp" +
                    "e<TW>().Where(predicate);\r\n        }\r\n\r\n\r\n        public IEnumerable<TO> OfType<" +
                    "TO>()\r\n        {\r\n            return Internal.Count == 0 ? Enumerable.Empty<TO>(" +
                    ") : Internal.OfType<TO>();\r\n        }\r\n\r\n        #region ICollection<T> Members\r" +
                    "\n\r\n        public virtual void Add(T item)\r\n        {\r\n            if(_model.IsT" +
                    "ransactional && _model.CurrentTransaction == null)\r\n                throw new Ex" +
                    "ception(\"Operation out of transaction\");\r\n\r\n            var oldCount = Internal." +
                    "Count;\r\n            Internal.Add(item);\r\n\r\n            if (_model.IsTransactiona" +
                    "l)\r\n            {\r\n                Action undo = () => Internal.Remove(item);\r\n " +
                    "               _model.CurrentTransaction.AddReversibleAction(undo);\r\n           " +
                    " }\r\n\r\n            if (CollectionChanged != null)\r\n                CollectionChan" +
                    "ged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add" +
                    ", item));\r\n\r\n            NotifyCountChanged(oldCount);\r\n        }\r\n\r\n\r\n        p" +
                    "ublic virtual void Clear()\r\n        {\r\n            if (_model.IsTransactional &&" +
                    " _model.CurrentTransaction == null)\r\n                throw new Exception(\"Operat" +
                    "ion out of transaction\");\r\n\r\n            var oldCount = Count;\r\n            Inte" +
                    "rnal.Clear();\r\n            \r\n            if (_model.IsTransactional)\r\n          " +
                    "  {\r\n                var oldItems = Internal.ToArray();\r\n                Action " +
                    "undo = () => Internal.AddRange(oldItems);\r\n                _model.CurrentTransac" +
                    "tion.AddReversibleAction(undo);\r\n            }\r\n\r\n            if (CollectionChan" +
                    "ged != null)\r\n                CollectionChanged(this, new NotifyCollectionChange" +
                    "dEventArgs(NotifyCollectionChangedAction.Reset));\r\n\r\n            NotifyCountChan" +
                    "ged(oldCount);\r\n        }\r\n\r\n        public bool Contains(T item)\r\n        {\r\n  " +
                    "          return Internal.Contains(item);\r\n        }\r\n\r\n        public void Copy" +
                    "To(T[] array, int arrayIndex)\r\n        {\r\n            Internal.CopyTo(array, arr" +
                    "ayIndex);\r\n        }\r\n\r\n        public int Count\r\n        {\r\n            get { r" +
                    "eturn Internal.Count; }\r\n        }\r\n\r\n\r\n        public virtual bool Remove(T ite" +
                    "m)\r\n        {\r\n            if (_model.IsTransactional && _model.CurrentTransacti" +
                    "on == null)\r\n                throw new Exception(\"Operation out of transaction\")" +
                    ";\r\n\r\n            var oldCount = Internal.Count;\r\n            var removed = Inter" +
                    "nal.Remove(item);\r\n            if (!removed) return false;\r\n\r\n            if (_m" +
                    "odel.IsTransactional)\r\n            {\r\n                Action undo = () => Intern" +
                    "al.Add(item);\r\n                _model.CurrentTransaction.AddReversibleAction(und" +
                    "o);\r\n            }\r\n\r\n            if (CollectionChanged != null)\r\n              " +
                    "  CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionC" +
                    "hangedAction.Remove, item));\r\n\r\n            NotifyCountChanged(oldCount);\r\n     " +
                    "       return true;\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region IEnumera" +
                    "ble<T> Members\r\n\r\n        public IEnumerator<T> GetEnumerator()\r\n        {\r\n    " +
                    "        return Internal.Count == 0 ? Enumerable.Empty<T>().GetEnumerator() : Int" +
                    "ernal.GetEnumerator();\r\n        }\r\n\r\n        IEnumerator<T> IEnumerable<T>.GetEn" +
                    "umerator()\r\n        {\r\n            if (Internal.Count == 0)\r\n                ret" +
                    "urn Enumerable.Empty<T>().GetEnumerator();\r\n            else\r\n                re" +
                    "turn Internal.GetEnumerator();\r\n        }\r\n\r\n        #endregion\r\n\r\n        #regi" +
                    "on IEnumerable Members\r\n\r\n        IEnumerator IEnumerable.GetEnumerator()\r\n     " +
                    "   {\r\n            return Internal.Count == 0 ? Enumerable.Empty<T>().GetEnumerat" +
                    "or() : Internal.GetEnumerator();\r\n        }\r\n\r\n        #endregion\r\n\r\n        #re" +
                    "gion ICollection<T> Members\r\n\r\n        void ICollection<T>.Add(T item)\r\n        " +
                    "{\r\n            Add(item);\r\n        }\r\n\r\n        void ICollection<T>.Clear()\r\n   " +
                    "     {\r\n            Clear();\r\n        }\r\n\r\n        bool ICollection<T>.Contains(" +
                    "T item)\r\n        {\r\n            return Internal.Contains(item);\r\n        }\r\n\r\n  " +
                    "      void ICollection<T>.CopyTo(T[] array, int arrayIndex)\r\n        {\r\n        " +
                    "    Internal.CopyTo(array, arrayIndex);\r\n        }\r\n\r\n        int ICollection<T>" +
                    ".Count\r\n        {\r\n            get { return Count; }\r\n        }\r\n\r\n        bool " +
                    "ICollection<T>.IsReadOnly\r\n        {\r\n            get { return ((IList<T>)Intern" +
                    "al).IsReadOnly; }\r\n        }\r\n\r\n        bool ICollection<T>.Remove(T item)\r\n    " +
                    "    {\r\n            return Remove(item);\r\n        }\r\n\r\n        #endregion\r\n\r\n    " +
                    "    #region ICollection Members\r\n\r\n        void ICollection.CopyTo(Array array, " +
                    "int index)\r\n        {\r\n            CopyTo((T[])array, index);\r\n        }\r\n\r\n    " +
                    "    int ICollection.Count\r\n        {\r\n            get { return Internal.Count; }" +
                    "\r\n        }\r\n\r\n        bool ICollection.IsSynchronized\r\n        {\r\n            g" +
                    "et { return ((ICollection)Internal).IsSynchronized; }\r\n        }\r\n\r\n        obje" +
                    "ct ICollection.SyncRoot\r\n        {\r\n            get { return ((ICollection)Inter" +
                    "nal).SyncRoot; }\r\n        }\r\n\r\n        #endregion\r\n\r\n\t\t#region IndexAccess\r\n\t\t\r\n" +
                    "\t\t#endregion\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class ItemSetTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
