// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Xbim.CodeGeneration.Templates.Infrastructure
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ModelTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ModelTemplate : ModelTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing Xbim.Common.Geometry;\r\nusing Xbim.Common.Step21;\r\n\r\nnamespac" +
                    "e ");
            
            #line 10 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\tpublic interface ");
            
            #line 12 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t\tIStepFileHeader Header { get; }\r\n\r\n\t\tbool IsTransactional { get; }\r\n\r\n\t  " +
                    "  ");
            
            #line 18 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_settings.EntityCollentionInterface));
            
            #line default
            #line hidden
            this.Write(" Instances { get; }\r\n\r\n\t    int Activate(");
            
            #line 20 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_settings.PersistEntityInterface));
            
            #line default
            #line hidden
            this.Write(" owningEntity, bool write);\r\n\t\t\r\n\t\t");
            
            #line 22 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_settings.TransactionInterface));
            
            #line default
            #line hidden
            this.Write(@" BeginTransaction(string name);
		
		/// <summary>
        /// It is a good practise to implement this property with WeakReference back field so it gets disposed 
		/// when transaction goes out of the scope. It would stay allive otherwise which is not desired unless you 
		/// want to keep it for undo-redo sessions. But even it that case it should be referenced from elsewhere.
        /// </summary>
		");
            
            #line 29 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\Infrastructure\ModelTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_settings.TransactionInterface));
            
            #line default
            #line hidden
            this.Write(" CurrentTransaction { get; }\r\n\r\n\t\tSystem.Reflection.Module SchemaModule { get; }\r" +
                    "\n\r\n\t\tIModelFactors ModelFactors { get; }\r\n\t}\r\n\r\n\tpublic interface IModelFactors\r" +
                    "\n    {\r\n        int GetGeometryFloatHash(float number);\r\n        int GetGeometry" +
                    "DoubleHash(double number);\r\n\r\n        /// <summary>\r\n        /// The min angle u" +
                    "sed when meshing shapes, works with DeflectionTolerance to set the resolution fo" +
                    "r linearising edges, default = 0.5\r\n        /// </summary>\r\n        double Defle" +
                    "ctionAngle { get; set; }\r\n\r\n        double OneFoot { get; }\r\n        double OneI" +
                    "nch { get; }\r\n        double OneKilometer { get; }\r\n        double OneMeter { ge" +
                    "t; }\r\n        double OneMile { get; }\r\n        double OneMilliMeter { get; }\r\n  " +
                    "  }\r\n\r\n    public class XbimModelFactors : IModelFactors\r\n    {\r\n\r\n        /// <" +
                    "summary>\r\n        /// Indicates level of detail for IfcProfileDefinitions, if 0 " +
                    "no fillet radii are applied, no leg slopes area applied, if 1 all details are ap" +
                    "plied\r\n        /// </summary>\r\n        public int ProfileDefLevelOfDetail = 0;\r\n" +
                    "        /// <summary>\r\n        /// If this number is greater than 0, any faceted" +
                    " meshes will be simplified if the number of faces exceeds the threshhold\r\n      " +
                    "  /// </summary>\r\n        public int SimplifyFaceCountThreshHold = 1000;\r\n\r\n    " +
                    "    /// <summary>\r\n        /// If the SimplifyFaceCountThreshHold is greater tha" +
                    "n 0, this is the minimum length of any edge in a face in millimetres, default is" +
                    " 10mm\r\n        /// </summary>\r\n        public double ShortestEdgeLength;\r\n      " +
                    "  /// <summary>\r\n        /// Precision used for Boolean solid geometry operation" +
                    "s, default 0.001mm\r\n        /// </summary>\r\n        public double PrecisionBoole" +
                    "an;\r\n        /// <summary>\r\n        /// The maximum Precision used for Boolean s" +
                    "olid geometry operations, default 10mm\r\n        /// </summary>\r\n        public d" +
                    "ouble PrecisionBooleanMax;\r\n        /// <summary>\r\n        /// The defection on " +
                    "a curve when triangulating the model\r\n        /// </summary>\r\n        public dou" +
                    "ble DeflectionTolerance;    \r\n        /// <summary>\r\n        /// Convert degrees" +
                    " to radians\r\n        /// </summary>\r\n        readonly public double AngleToRadia" +
                    "nsConversionFactor;\r\n        /// <summary>\r\n        /// Conversion to metres\r\n  " +
                    "      /// </summary>\r\n        readonly public double LengthToMetresConversionFac" +
                    "tor;\r\n        /// <summary>\r\n        /// Used to display a vertex this is the di" +
                    "ameter that will be used to auto-generate a geometric representation of a topolo" +
                    "gical vertex\r\n        /// </summary>\r\n        readonly public double VertexPoint" +
                    "Diameter;\r\n        /// <summary>\r\n        /// The maximum number of faces to sew" +
                    " and check the result is a valid BREP, face sets with more than this number of f" +
                    "aces will be processed as read from the model\r\n        /// </summary>\r\n        p" +
                    "ublic int MaxBRepSewFaceCount;\r\n        /// <summary>\r\n        /// The  normal t" +
                    "olerance under which two given points are still assumed to be identical\r\n       " +
                    " /// </summary>\r\n        public double Precision;\r\n        /// <summary>\r\n      " +
                    "  /// Returns the value for one metre in the units of the model\r\n        /// </s" +
                    "ummary>\r\n        /// /// <summary>\r\n        /// The  maximum tolerance under whi" +
                    "ch two given points are still assumed to be identical\r\n        /// </summary>\r\n " +
                    "       public double PrecisionMax;\r\n        /// <summary>\r\n        /// The numbe" +
                    "r of decimal places to round a number to in order to truncate distances, not to " +
                    "be confused with precision, this is mostly for hashing and reporting, precision " +
                    "determins if two points are the same. NB this must be less that the precision fo" +
                    "r booleans\r\n        /// </summary>\r\n        readonly public int Rounding;\r\n     " +
                    "   readonly public double OneMetre;\r\n        /// <summary>\r\n        /// Returns " +
                    "the value for one millimetre in the units of the model\r\n        /// </summary>\r\n" +
                    "        readonly public double OneMilliMetre;\r\n\r\n        public readonly XbimMat" +
                    "rix3D? WorldCoordinateSystem;\r\n        private readonly int _significantOrder;\r\n" +
                    "        public int GetGeometryFloatHash(float number)\r\n        {\r\n            re" +
                    "turn Math.Round(number, _significantOrder).GetHashCode();\r\n        }\r\n\r\n        " +
                    "public int GetGeometryDoubleHash(double number)\r\n        {\r\n            return M" +
                    "ath.Round(number, _significantOrder).GetHashCode();\r\n        }\r\n\r\n        public" +
                    " XbimModelFactors(double angToRads, double lenToMeter, double? precision = null," +
                    " XbimMatrix3D? wcs= null)\r\n        {\r\n            WorldCoordinateSystem = wcs;\r\n" +
                    "            AngleToRadiansConversionFactor = angToRads;\r\n            LengthToMet" +
                    "resConversionFactor = lenToMeter;\r\n           \r\n            OneMeter = OneMetre " +
                    "= 1/lenToMeter;\r\n            OneMilliMeter = OneMilliMetre = OneMeter / 1000.0;\r" +
                    "\n            OneKilometer = OneMeter * 1000.0;\r\n            OneFoot = OneMeter /" +
                    " 3.2808;\r\n            OneInch = OneMeter / 39.37;\r\n            OneMile = OneMete" +
                    "r * 1609.344;\r\n\r\n\r\n            DeflectionTolerance = OneMilliMetre*5; //5mm chor" +
                    "d deflection\r\n            DeflectionAngle = 0.5; \r\n            VertexPointDiamet" +
                    "er = OneMilliMetre * 10; //1 cm\r\n            //if (precision.HasValue)\r\n        " +
                    "    //    Precision = Math.Min(precision.Value,OneMilliMetre / 1000);\r\n         " +
                    "   //else\r\n            //    Precision = Math.Max(1e-5, OneMilliMetre / 1000);\r\n" +
                    "            Precision = precision ?? 1e-5;\r\n            PrecisionMax = OneMilliM" +
                    "etre / 10;\r\n            MaxBRepSewFaceCount = 0;\r\n            PrecisionBoolean =" +
                    "  Math.Max(Precision,OneMilliMetre/10); //might need to make it courser than poi" +
                    "nt precision if precision is very fine\r\n            PrecisionBooleanMax = OneMil" +
                    "liMetre *100;\r\n            Rounding = Math.Abs((int)Math.Log10(Precision*100)); " +
                    "//default round all points to 100 times  precision, this is used in the hash fun" +
                    "ctions\r\n\r\n            var exp = Math.Floor(Math.Log10(Math.Abs(OneMilliMetre / 1" +
                    "0d))); //get exponent of first significant digit\r\n            _significantOrder " +
                    "= exp > 0 ? 0 : (int)Math.Abs(exp);\r\n            ShortestEdgeLength = 10 * OneMi" +
                    "lliMetre;\r\n        }\r\n\r\n        /// <summary>\r\n        /// The min angle used wh" +
                    "en meshing shapes, works with DeflectionTolerance to set the resolution for line" +
                    "arising edges, default = 0.5\r\n        /// </summary>\r\n        public double Defl" +
                    "ectionAngle { get; set; }\r\n\r\n        public double OneFoot\r\n        {\r\n         " +
                    "   get; private set; \r\n        }\r\n        public double OneInch\r\n        {\r\n    " +
                    "        get;\r\n            private set;\r\n        }\r\n        public double OneKilo" +
                    "meter\r\n        {\r\n            get;\r\n            private set;\r\n        }\r\n       " +
                    " public double OneMeter\r\n        {\r\n            get;\r\n            private set;\r\n" +
                    "        }\r\n        public double OneMile\r\n        {\r\n            get;\r\n         " +
                    "   private set;\r\n        }\r\n        public double OneMilliMeter\r\n        {\r\n    " +
                    "        get;\r\n            private set;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class ModelTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
