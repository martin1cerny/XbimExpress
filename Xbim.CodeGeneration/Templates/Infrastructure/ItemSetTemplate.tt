<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

namespace <#= Namespace #>
{
    public class <#= Name #><T> : I<#= Name #><T>
    {
        private readonly List<T> _set;
        private readonly <#= ModelInterface #> _model;

		public <#= PersistEntityInterface #> OwningEntity { get; private set; }

        protected List<T> Internal
        {
            get { return _set; }
        }


        internal <#= Name #>(<#= PersistEntityInterface #> entity)
        {
            _set = new List<T>();
            _model = entity.Model;
			OwningEntity = entity;
        }

		internal <#= Name #>(<#= PersistEntityInterface #> entity, int count)
        {
            _set = new List<T>(count);
            _model = entity.Model;
			OwningEntity = entity;
        }

        internal <#= Name #>(<#= PersistEntityInterface #> entity, IEnumerable<T> collection)
        {
            _set = new List<T>(collection);
            _model = entity.Model;
			OwningEntity = entity;
        }

		//this is to be only used internaly to add object outside of any transaction or event firing
		//that is typically during parsing operation
		internal void InternalAdd(T value)
		{
			Internal.Add(value);
		}

        #region I<#= Name #><T> Members
        public T First
        {
            get { return Internal.First(); }
        }

        public T FirstOrDefault()
        {
            return Internal.FirstOrDefault();
        }

        public T FirstOrDefault(Func<T, bool> predicate)
        {
            return Internal.FirstOrDefault(predicate);
        }

        public TF FirstOrDefault<TF>(Func<TF, bool> predicate)
        {
            return OfType<TF>().FirstOrDefault(predicate);
        }

        public IEnumerable<TW> Where<TW>(Func<TW, bool> predicate)
        {
            return OfType<TW>().Where(predicate);
        }

        public IEnumerable<TO> OfType<TO>()
        {
            return Internal.Count == 0 ? Enumerable.Empty<TO>() : Internal.OfType<TO>();
        }
        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        [NonSerialized]
        private readonly PropertyChangedEventArgs _countPropChangedEventArgs =
            new PropertyChangedEventArgs("Count");

        private void NotifyCountChanged(int oldValue)
        {
            var propChanged = PropertyChanged;
            if (propChanged != null && oldValue != Internal.Count)
                propChanged(this, _countPropChangedEventArgs);
        }

        #endregion

        #region INotifyCollectionChanged Members

        public event NotifyCollectionChangedEventHandler CollectionChanged;

        #endregion

        #region ICollection<T> Members

        public virtual void Add(T item)
        {
            if(_model.IsTransactional && _model.CurrentTransaction == null)
                throw new Exception("Operation out of transaction");
			
			//activate owning entity for write in case it is not active yet
			OwningEntity.Activate(true);

            var oldCount = Internal.Count;
			Action doAction = () => {
				Internal.Add(item);
				if (CollectionChanged != null)
					CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, item));
				NotifyCountChanged(oldCount);
			};

			doAction();

            if (!_model.IsTransactional) return;
            
            Action undoAction = () => {
				Internal.Remove(item);
				if (CollectionChanged != null)
					CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, item));
				NotifyCountChanged(oldCount+1);
			};

            _model.CurrentTransaction.AddReversibleAction(doAction, undoAction, OwningEntity, ChangeType.Modified);
        }


        public virtual void Clear()
        {
                        if (_model.IsTransactional && _model.CurrentTransaction == null)
                throw new Exception("Operation out of transaction");

            OwningEntity.Activate(true);

            var oldCount = Count;
            var oldItems = Internal.ToArray();
            Action doAction = () =>
            {
                Internal.Clear();
                if (CollectionChanged != null)
                    CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));
                NotifyCountChanged(oldCount);
            };
            doAction();

            if (!_model.IsTransactional) return;

            Action undoAction = () =>
            {
                Internal.AddRange(oldItems);
                if (CollectionChanged != null)
                    CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, oldItems));
                NotifyCountChanged(0);
            };
            _model.CurrentTransaction.AddReversibleAction(doAction, undoAction, OwningEntity, ChangeType.Modified);
        }

        public bool Contains(T item)
        {
            return Internal.Contains(item);
        }

        public void CopyTo(T[] array, int arrayIndex)
        {
            Internal.CopyTo(array, arrayIndex);
        }

        public int Count
        {
            get { return Internal.Count; }
        }


        public virtual bool Remove(T item)
        {
            if (_model.IsTransactional && _model.CurrentTransaction == null)
                throw new Exception("Operation out of transaction");

            OwningEntity.Activate(true);

            var oldCount = Internal.Count;
            var removed = Internal.Remove(item);
            //don't do anything if nothing happened realy
            if (!removed) return false;



            if (!_model.IsTransactional) return true;
            
            //raise events
            if (CollectionChanged != null)
                CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, item));
            NotifyCountChanged(oldCount);

            Action doAction = () =>
            {
                Internal.Remove(item);
                if (CollectionChanged != null)
                    CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, item));
                NotifyCountChanged(oldCount);
            };
            Action undoAction = () =>
            {
                Internal.Add(item);
                if (CollectionChanged != null)
                    CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, item));
                NotifyCountChanged(oldCount-1);
            };
            _model.CurrentTransaction.AddReversibleAction(doAction, undoAction, OwningEntity, ChangeType.Modified);
            
            return true;
        }

        #endregion

        #region IEnumerable<T> Members

        public IEnumerator<T> GetEnumerator()
        {
            return Internal.Count == 0 ? Enumerable.Empty<T>().GetEnumerator() : Internal.GetEnumerator();
        }

        #endregion

        #region IEnumerable Members

        IEnumerator IEnumerable.GetEnumerator()
        {
            return Internal.Count == 0 ? Enumerable.Empty<T>().GetEnumerator() : Internal.GetEnumerator();
        }

        #endregion

        #region ICollection<T> Members

        void ICollection<T>.Add(T item)
        {
            Add(item);
        }

        void ICollection<T>.Clear()
        {
            Clear();
        }

        bool ICollection<T>.Contains(T item)
        {
            return Internal.Contains(item);
        }

        void ICollection<T>.CopyTo(T[] array, int arrayIndex)
        {
            Internal.CopyTo(array, arrayIndex);
        }

        int ICollection<T>.Count
        {
            get { return Count; }
        }

        bool ICollection<T>.IsReadOnly
        {
            get { return ((IList<T>)Internal).IsReadOnly; }
        }

        bool ICollection<T>.Remove(T item)
        {
            return Remove(item);
        }

        #endregion

        #region ICollection Members

        void ICollection.CopyTo(Array array, int index)
        {
            CopyTo((T[])array, index);
        }

        int ICollection.Count
        {
            get { return Internal.Count; }
        }

        bool ICollection.IsSynchronized
        {
            get { return ((ICollection)Internal).IsSynchronized; }
        }

        object ICollection.SyncRoot
        {
            get { return ((ICollection)Internal).SyncRoot; }
        }

        #endregion

		#region IList<T> members
		public T this[int index]
		{
		    get
		    {
		        return Internal[index];
		    }
		    set
		    {
				if(_model.IsTransactional && _model.CurrentTransaction == null)
				    throw new Exception("Operation out of transaction");

                OwningEntity.Activate(true);

				var oldValue = Internal[index];
                Action doAction = () =>
                {
                    Internal[index] = value;
                    if (CollectionChanged != null)
                        CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace, value));
                };

		        doAction();

		        if (!_model.IsTransactional) return;

		        Action undoAction = () =>
		        {
		            Internal[index] = oldValue;
                    if (CollectionChanged != null)
                        CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace, oldValue));
		        };
		        
				_model.CurrentTransaction.AddReversibleAction(doAction, undoAction, OwningEntity, ChangeType.Modified);
		    }
		}

		public int IndexOf(T item)
		{
			return Internal.IndexOf(item);
		}


        public void Insert(int index, T item)
        {
            if (_model.IsTransactional && _model.CurrentTransaction == null)
                throw new Exception("Operation out of transaction");

            OwningEntity.Activate(true);

            var oldCount = Internal.Count;
            Action doAction = () =>
            {
                Internal.Insert(index, item);
                if (CollectionChanged != null)
                    CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, item));

                NotifyCountChanged(oldCount);
            };
            var newCount = Internal.Count;

            if (!_model.IsTransactional) return;

            Action undoAction = () =>
            {
                Internal.RemoveAt(index);
                if (CollectionChanged != null)
                    CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, item));
                NotifyCountChanged(newCount);
            };
            _model.CurrentTransaction.AddReversibleAction(doAction, undoAction, OwningEntity, ChangeType.Modified);
        }

        public void RemoveAt(int index)
        {
            var toRemove = Internal[index];
            Remove(toRemove);
        }
        #endregion

        #region IList members
        int IList.Add(object value)
        {
            if (!(value is T)) return -1;

            var v = (T) value;
            Add(v);
            return Internal.Count - 1;
        }

        bool IList.Contains(object value)
        {
            return ((IList)Internal).Contains(value);
        }

        int IList.IndexOf(object value)
        {
            return ((IList)Internal).IndexOf(value);
        }

        void IList.Insert(int index, object value)
        {
            Insert(index, (T)value);
        }

        bool IList.IsFixedSize
        {
            get { return false; }
        }

        bool IList.IsReadOnly
        {
            get { return _model.IsTransactional && _model.CurrentTransaction != null; }
        }

        void IList.Remove(object value)
        {
            Remove((T)value);
        }

        object IList.this[int index]
        {
            get
            {
                return this[index];
            }
            set
            {
                this[index] = value == null ? default(T) : (T)value;
            }
        }
        #endregion
    }
}
