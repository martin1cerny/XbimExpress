<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Collections;
using System.Reflection;
using Xbim.Common;

namespace <#= Namespace #>
{
    public class <#= Name #><T> : Common.Collections.ItemSet<T>
    {
        internal ItemSet(IPersistEntity entity, int capacity, byte property): base(entity, capacity, property)
        {
        }

		//this is to be only used internaly to add object outside of any transaction or event firing
		//that is typically during parsing operation
		internal void InternalAdd(T value)
		{
			Internal.Add(value);
		}
		
        internal T InternalGetAt(int index)
        {
            if (index < Count)
                return this[index];

            if (index > Count)
                throw new Exception("It is not possible to get object which is more that just the next after the last one.");
            
            if (!typeof (IList).IsAssignableFrom(typeof (T)))
                return default(T);

            var result = (T) Activator.CreateInstance(typeof (T), BindingFlags.NonPublic | BindingFlags.Instance, null,
                new object[] {OwningEntity, Property}, null);
            InternalAdd(result);
            return result;

        }
    }
}
