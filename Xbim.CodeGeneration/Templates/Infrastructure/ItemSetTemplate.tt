<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

namespace <#= Namespace #>
{
    public class <#= Name #><T> : ICollection<T>, ICollection, INotifyCollectionChanged, INotifyPropertyChanged
    {
        private readonly List<T> _set;
        private readonly <#= ModelInterface #> _model;

        protected List<T> Internal
        {
            get { return _set; }
        }


        internal <#= Name #>(<#= ModelInterface #> model)
        {
            _set = new List<T>();
            _model = model;
        }

        internal <#= Name #>(<#= ModelInterface #> model, IEnumerable<T> collection)
        {
            _set = new List<T>(collection);
            _model = model;
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        [NonSerialized]
        private readonly PropertyChangedEventArgs _countPropChangedEventArgs =
            new PropertyChangedEventArgs("Count");

        private void NotifyCountChanged(int oldValue)
        {
            var propChanged = PropertyChanged;
            if (propChanged != null && oldValue != Internal.Count)
                propChanged(this, _countPropChangedEventArgs);
        }

        #endregion

        #region INotifyCollectionChanged Members

        public event NotifyCollectionChangedEventHandler CollectionChanged;


        #endregion

        public T First
        {
            get { return Internal.First(); }
        }

        public T FirstOrDefault()
        {
            return Internal.FirstOrDefault();
        }

        public T FirstOrDefault(Func<T, bool> predicate)
        {
            return Internal.FirstOrDefault(predicate);
        }

        public TF FirstOrDefault<TF>(Func<TF, bool> predicate)
        {
            return OfType<TF>().FirstOrDefault<TF>(predicate);
        }

        public IEnumerable<TW> Where<TW>(Func<TW, bool> predicate)
        {
            return OfType<TW>().Where(predicate);
        }


        public IEnumerable<TO> OfType<TO>()
        {
            return Internal.Count == 0 ? Enumerable.Empty<TO>() : Internal.OfType<TO>();
        }

        #region ICollection<T> Members

        public virtual void Add(T item)
        {
            if(_model.IsTransactional && _model.CurrentTransaction == null)
                throw new Exception("Operation out of transaction");

            var oldCount = Internal.Count;
            Internal.Add(item);

            if (_model.IsTransactional)
            {
                Action undo = () => Internal.Remove(item);
                _model.CurrentTransaction.AddReversibleAction(undo);
            }

            if (CollectionChanged != null)
                CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, item));

            NotifyCountChanged(oldCount);
        }


        public virtual void Clear()
        {
            if (_model.IsTransactional && _model.CurrentTransaction == null)
                throw new Exception("Operation out of transaction");

            var oldCount = Count;
            Internal.Clear();
            
            if (_model.IsTransactional)
            {
                var oldItems = Internal.ToArray();
                Action undo = () => Internal.AddRange(oldItems);
                _model.CurrentTransaction.AddReversibleAction(undo);
            }

            if (CollectionChanged != null)
                CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));

            NotifyCountChanged(oldCount);
        }

        public bool Contains(T item)
        {
            return Internal.Contains(item);
        }

        public void CopyTo(T[] array, int arrayIndex)
        {
            Internal.CopyTo(array, arrayIndex);
        }

        public int Count
        {
            get { return Internal.Count; }
        }


        public virtual bool Remove(T item)
        {
            if (_model.IsTransactional && _model.CurrentTransaction == null)
                throw new Exception("Operation out of transaction");

            var oldCount = Internal.Count;
            var removed = Internal.Remove(item);
            if (!removed) return false;

            if (_model.IsTransactional)
            {
                Action undo = () => Internal.Add(item);
                _model.CurrentTransaction.AddReversibleAction(undo);
            }

            if (CollectionChanged != null)
                CollectionChanged(this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, item));

            NotifyCountChanged(oldCount);
            return true;
        }

        #endregion

        #region IEnumerable<T> Members

        public IEnumerator<T> GetEnumerator()
        {
            return Internal.Count == 0 ? Enumerable.Empty<T>().GetEnumerator() : Internal.GetEnumerator();
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (Internal.Count == 0)
                return Enumerable.Empty<T>().GetEnumerator();
            else
                return Internal.GetEnumerator();
        }

        #endregion

        #region IEnumerable Members

        IEnumerator IEnumerable.GetEnumerator()
        {
            return Internal.Count == 0 ? Enumerable.Empty<T>().GetEnumerator() : Internal.GetEnumerator();
        }

        #endregion

        #region ICollection<T> Members

        void ICollection<T>.Add(T item)
        {
            Add(item);
        }

        void ICollection<T>.Clear()
        {
            Clear();
        }

        bool ICollection<T>.Contains(T item)
        {
            return Internal.Contains(item);
        }

        void ICollection<T>.CopyTo(T[] array, int arrayIndex)
        {
            Internal.CopyTo(array, arrayIndex);
        }

        int ICollection<T>.Count
        {
            get { return Count; }
        }

        bool ICollection<T>.IsReadOnly
        {
            get { return ((IList<T>)Internal).IsReadOnly; }
        }

        bool ICollection<T>.Remove(T item)
        {
            return Remove(item);
        }

        #endregion

        #region ICollection Members

        void ICollection.CopyTo(Array array, int index)
        {
            CopyTo((T[])array, index);
        }

        int ICollection.Count
        {
            get { return Internal.Count; }
        }

        bool ICollection.IsSynchronized
        {
            get { return ((ICollection)Internal).IsSynchronized; }
        }

        object ICollection.SyncRoot
        {
            get { return ((ICollection)Internal).SyncRoot; }
        }

        #endregion
    }
}
