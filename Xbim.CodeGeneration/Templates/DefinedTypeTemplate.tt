<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

namespace <#= Namespace #>
{
	public partial struct <#= Name #> <#= Inheritance #>
	{ 
		private readonly <#= UnderlyingType #> _theValue;

        public object Value
        {
            get { return _theValue; }
        }

        public override string ToString()
        {
            return Value != null ? Value.ToString() : typeof(<#= UnderlyingType #>).Name;
        }

        public <#= Name #>(<#= UnderlyingType #> val)
        {
            _theValue = val;
        }

        public static implicit operator <#= Name #>(<#= UnderlyingType #> value)
        {
            return new <#= Name #>(value);
        }

        public static implicit operator <#= UnderlyingType #>(<#= Name #> obj)
        {
            return obj._theValue;
        }


        public override bool Equals(object obj)
        {
			if (obj == null && Value == null)
                return true;

            if (obj == null)
                return false;

            if (GetType() != obj.GetType())
                return false;

            return ((<#= Name #>) obj)._theValue == _theValue;
        }

        public static bool operator ==(<#= Name #> obj1, <#= Name #> obj2)
        {
            return Equals(obj1, obj2);
        }

        public static bool operator !=(<#= Name #> obj1, <#= Name #> obj2)
        {
            return !Equals(obj1, obj2);
        }

        public override int GetHashCode()
        {
            return Value != null ? _theValue.GetHashCode() : base.GetHashCode();
        }

		#region <#= PersistInterface #> implementation
		
		void <#= PersistInterface #>.Set(int propIndex, IPropertyValue value)
		{
            throw new System.NotImplementedException();
		}

		#endregion
	}
}
