<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

namespace <#= Namespace #>
{
	[ExpressType("<#= Type.PersistanceName #>", <#= Type.TypeId #>)]
	[DefinedType(typeof(<#= UnderlyingType #>))]
    // ReSharper disable once PartialTypeWithSinglePart
	public partial struct <#= Name #> <#= Inheritance #>, System.IEquatable<<#= UnderlyingType #>>
	{ 
		private <#= UnderlyingType #> _value;
        
<# if (IsComplex){ #>
		public static void Add(ref <#= Name #> comp, <#= UnderlyingArrayType #> component)
        {
            if (comp._value == null)
                comp.Initialise(component);
            else
                comp._value.Add(component);
        }

		private void Initialise(<#= UnderlyingArrayType #> comp)
        {
            _value = new List<<#= UnderlyingArrayType #>>{ comp };
        }

<# } #>
		public object Value
        {
            get { return _value; }
        }

<# if ((int)SimpleType < 7) { #> 
		<#= UnderlyingType #> IExpress<#= SimpleType #>.Value { get { return _value; } }

<# } 
   if (!IsComplex ) { /*Complex types can't be initialized from string representation */ #>
		public override string ToString()
        {
<# switch(SimpleType){  
		case SimpleTypeEnum.RealType:
		case SimpleTypeEnum.NumberType: #>
            return _value.ToString("R", Culture);
<#			break; 
		case SimpleTypeEnum.LogicalType: #>
			if (_value == true)
                return "true";
            else if (_value == false)
                return "false";
            else
                return "unknown";
<#			break;
		case SimpleTypeEnum.IntegerType: #>
			return _value.ToString();
<#			break; 
		case SimpleTypeEnum.BooleanType: #>
			return _value ? "true" : "false";
<#			break;
		case SimpleTypeEnum.BinaryType: #>
			if (_value == null)
				return "";
            var hex = new System.Text.StringBuilder(_value.Length * 2);
            foreach (byte b in _value)
                hex.AppendFormat("{0:X2}", b);
            return hex.ToString();
<#			break; 
		case SimpleTypeEnum.StringType: #>
			return _value ?? "";
<#			break; 
		case SimpleTypeEnum.EnumerationType: #>
			return _value.ToString();
<#			break;#>
<# } #>
        }
<# } #>
        public <#= Name #>(<#= UnderlyingType #> val)
        {
<# if (IsComplex){ #>
			//copy items into new inner list
			_value = new <#= UnderlyingType #>(val);
<# } else { #>
            _value = val;
<# } #>
        }

<# if (!IsComplex && SimpleType != SimpleTypeEnum.StringType) { //Complex types can't be initialized from string representation
#>
<# if (SimpleType == SimpleTypeEnum.NumberType || SimpleType == SimpleTypeEnum.RealType) { #>
	    private static readonly System.Globalization.CultureInfo Culture = new System.Globalization.CultureInfo("en-US");

<# } #>
		public <#= Name #>(string val)
        {
<# switch(SimpleType){  
		case SimpleTypeEnum.RealType:
		case SimpleTypeEnum.NumberType: #>
			_value = System.Convert.ToDouble(val, Culture);
<#			break; 
		case SimpleTypeEnum.LogicalType: #>
			if (string.Compare(val, "true", System.StringComparison.OrdinalIgnoreCase) == 0 || string.Compare(val, ".T.", System.StringComparison.OrdinalIgnoreCase) == 0)
                _value = true;
            else if (string.Compare(val, "false", System.StringComparison.OrdinalIgnoreCase) == 0)
                _value = false;
            else
                _value = null;
<#			break;
		case SimpleTypeEnum.IntegerType: #>
			_value = System.Convert.ToInt64(val);
<#			break; 
		case SimpleTypeEnum.BooleanType: #>
			if (string.Compare(val, "true", System.StringComparison.OrdinalIgnoreCase) == 0 || string.Compare(val, ".T.", System.StringComparison.OrdinalIgnoreCase) == 0)
                _value = true;
            else
                _value = false;
<#			break;
		case SimpleTypeEnum.EnumerationType: #>
			var value = val.Trim('.');
			if (!System.Enum.TryParse(value, true, out _value))
                throw new System.ArgumentException();
<#			break;
		case SimpleTypeEnum.BinaryType: #>
			var hex = val.Trim('"').Substring(1); //trim eventual leading and ending apostrophe and leading offset number
			int numChars = hex.Length;
            _value = new byte[numChars / 2];
            for (int i = 0; i < numChars; i += 2)
                _value[i / 2] = System.Convert.ToByte(hex.Substring(i, 2), 16);
<#			break; #>

<# } #>
        }
<# } #>

        public static implicit operator <#= Name #>(<#= UnderlyingType #> value)
        {
            return new <#= Name #>(value);
        }

        public static implicit operator <#= UnderlyingType #>(<#= Name #> obj)
        {
<# if (IsComplex){ #>
			//return copy so that underlying collection is not exposed
			return new <#= UnderlyingType #>(obj._value);
<# } else { #>
            return obj._value;
<# } #>

        }


        public override bool Equals(object obj)
        {
			if (obj == null && Value == null)
                return true;

            if (obj == null)
                return false;

            if (GetType() != obj.GetType())
                return false;

<#	if (!IsComplex) { #>
            return ((<#= Name #>) obj)._value == _value;
<#	} else { #>
            return System.Linq.Enumerable.SequenceEqual(((<#= Name #>) obj)._value, _value);
<#	} #>
        }

		public bool Equals(<#= UnderlyingType #> other)
	    {
	        return this == other;
	    }

        public static bool operator ==(<#= Name #> obj1, <#= Name #> obj2)
        {
            return Equals(obj1, obj2);
        }

        public static bool operator !=(<#= Name #> obj1, <#= Name #> obj2)
        {
            return !Equals(obj1, obj2);
        }

        public override int GetHashCode()
        {
<#	if (IsComplex) { #>
            return Value != null ? _value.Sum(o => o.GetHashCode()) : base.GetHashCode();
<#	} else { #>
            return Value != null ? _value.GetHashCode() : base.GetHashCode();
<#	} #>
        }

		#region <#= PersistInterface #> implementation
		void <#= PersistInterface #>.Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			if (propIndex != 0)
				throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
<#	if (IsComplex) { #>
			if (_value == null)
				_value = new <#= UnderlyingType #>();
<#		if (IsComplexOfEntities) { #>
            _value.Add(value.<#= GetPropertyValueMember(Type.Domain) #> as <#= UnderlyingArrayType #>);
<#		} else { #>
            _value.Add(value.<#= GetPropertyValueMember(Type.Domain) #>);
<#		} #>
<#	} 
	else if(SimpleType == SimpleTypeEnum.EnumerationType) { #>
            System.Enum.TryParse(value.<#= GetPropertyValueMember(Type.Domain) #>, true, out _value);
<#	} else { #>
            _value = value.<#= GetPropertyValueMember(Type.Domain) #>;
<#	}#>            
		}
		#endregion

		#region IExpressValueType implementation
        System.Type IExpressValueType.UnderlyingSystemType { 
			get 
			{
				return typeof(<#= UnderlyingType #>);
			}
		}
		#endregion

<# if (IsComplex) { #>
		#region IExpressComplexType implementation
		IEnumerable<object> IExpressComplexType.Properties
        {
            get
            {
				if(_value == null) yield break;
	            foreach (var value in _value)
	                yield return value;
            }
        }
		#endregion
<# } #>

	}
}
