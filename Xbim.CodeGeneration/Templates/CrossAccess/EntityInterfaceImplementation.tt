<#@ template language="C#" inherits="EntityInterfaceTemplate"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Xbim.ExpressParser.SDAI" #>

<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

// ReSharper disable once CheckNamespace
namespace <#= OwnNamespace #>
{
	public partial class @<#= Name #> : <#= Interface #>
	{
<#	foreach(var attribute in ExplicitAttributesToImplement){ #>
		<#= GetInterfaceCSTypeFull(attribute) #> <#= "I" + attribute.ParentEntity.Name #>.<#= attribute.Name #> 
		{ 
			get
			{
<#		var match = GetMatch(attribute); 
		if (match == null || !match.IsTypeCompatible) { #>
				throw new System.NotImplementedException();
<#		} else if (match.SourceAttribute.Domain is DefinedType) { #>
<#			if (match.SourceAttribute.OptionalFlag) { #>
				if (<#= match.SourceAttribute.Name #> == null) return null;
<#			} #>
				return new <#= GetInterfaceCSTypeFull(attribute).Trim('?') #>((<#= GetBaseSystemType(match.SourceAttribute.Domain as DefinedType) #>)<#= match.SourceAttribute.Name #>);
<#		} else if (match.SourceAttribute.Domain is EntityDefinition) { #>
				return <#= match.SourceAttribute.Name #> as <#= GetInterfaceCSTypeFull(attribute) #>;
<#		} else if (match.SourceAttribute.Domain is SelectType) { #>
				if (<#= match.SourceAttribute.Name #> == null) return null;
<# 			foreach(var st in GetAllSpecific((SelectType)match.SourceAttribute.Domain)) {
				var ed = st as EntityDefinition;
				if(ed != null) {#>
				var <#= st.Name.ToString().ToLower() #> = <#= match.SourceAttribute.Name #> as <#= GetCSTypeFull(st) #>;
				if (<#= st.Name.ToString().ToLower() #> != null) 
<#					if (IsInSelect(ed, match.TargetAttribute.Domain as SelectType)) {#>
					return <#= st.Name.ToString().ToLower() #>;
<#					} else { #>
					//TODO: Handle entity which is not part of target select interface
					throw new System.NotImplementedException();
<#					} #>
<#				} else { #>
				throw new System.NotImplementedException();
<#				} #>
<#			} #>
				return null;
<#		} else { #>
				throw new System.NotImplementedException();
<#		} #>
			} 
		}
<#	} #>
<# foreach(var attribute in InverseAttributesToImplement){  
	var inverseType = "I" + attribute.Domain.Name; #>
<# if (IsEnumeration(attribute)) { #>
		IEnumerable<<#=inverseType #>> <#= "I" + attribute.ParentEntity.Name #>.<#= attribute.Name #> 
<# } else { #>
		<#=inverseType #> <#= Interface #>.<#= attribute.Name #> 
<# } #>
		{ 
			get
			{
<# if (IsDoubleAggregation(attribute)) {#>
				return Model.Instances.<#= IsEnumeration(attribute) ? "Where" : "FirstOrDefault" #><<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> != null &&  e.<#= attribute.InvertedAttr.Name #>.Any( i => i.Contains(this)));
<# } else if (IsAggregation(attribute)){#>
				return Model.Instances.<#= IsEnumeration(attribute) ? "Where" : "FirstOrDefault" #><<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> != null &&  e.<#= attribute.InvertedAttr.Name #>.Contains(this));
<# } else {#>
				return Model.Instances.<#= IsEnumeration(attribute) ? "Where" : "FirstOrDefault" #><<#= inverseType #>>(e => (e.<#= attribute.InvertedAttr.Name #> as <#= Name #>) == this);
<# } #>
			} 
		}
<# } #>
	}
}