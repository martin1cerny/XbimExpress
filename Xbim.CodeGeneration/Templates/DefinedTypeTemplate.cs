// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Xbim.CodeGeneration.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class DefinedTypeTemplate : DefinedTypeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            
            #line 7 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 foreach(var u in Using) { 
            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 8 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(u));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 9 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 11 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t[ExpressType(\"");
            
            #line 13 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Type.PersistanceName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 13 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Type.TypeId));
            
            #line default
            #line hidden
            this.Write(")]\r\n    // ReSharper disable once PartialTypeWithSinglePart\r\n\tpublic partial stru" +
                    "ct ");
            
            #line 15 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 15 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Inheritance));
            
            #line default
            #line hidden
            this.Write(", System.IEquatable<");
            
            #line 15 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingType));
            
            #line default
            #line hidden
            this.Write(">\r\n\t{ \r\n\t\tprivate ");
            
            #line 17 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingType));
            
            #line default
            #line hidden
            this.Write(" _value;\r\n        \r\n");
            
            #line 19 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 if (IsComplex){ 
            
            #line default
            #line hidden
            this.Write("\t\tpublic static void Add(ref ");
            
            #line 20 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write(" comp, ");
            
            #line 20 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingArrayType));
            
            #line default
            #line hidden
            this.Write(" component)\r\n        {\r\n            if (comp._value == null)\r\n                com" +
                    "p.Initialise(component);\r\n            else\r\n                comp._value.Add(comp" +
                    "onent);\r\n        }\r\n\r\n\t\tprivate void Initialise(");
            
            #line 28 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingArrayType));
            
            #line default
            #line hidden
            this.Write(" comp)\r\n        {\r\n            _value = new List<");
            
            #line 30 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingArrayType));
            
            #line default
            #line hidden
            this.Write(">{ comp };\r\n        }\r\n\r\n");
            
            #line 33 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\tpublic object Value\r\n        {\r\n            get { return _value; }\r\n        }\r\n" +
                    "\r\n");
            
            #line 39 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 if (!IsComplex ) { //Complex types can't be initialized from string representation

            
            #line default
            #line hidden
            this.Write("\t\tpublic override string ToString()\r\n        {\r\n");
            
            #line 43 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 switch(SimpleType){  
		case SimpleTypeEnum.RealType:
		case SimpleTypeEnum.NumberType: 
            
            #line default
            #line hidden
            this.Write("            return _value.ToString(System.Globalization.CultureInfo.InvariantCult" +
                    "ure);\r\n");
            
            #line 47 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
			break; 
		case SimpleTypeEnum.LogicalType: 
            
            #line default
            #line hidden
            this.Write("\t\t\tif (_value == true)\r\n                return \"true\";\r\n            else if (_val" +
                    "ue == false)\r\n                return \"false\";\r\n            else\r\n               " +
                    " return \"unknown\";\r\n");
            
            #line 55 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
			break;
		case SimpleTypeEnum.BinaryType: 
		case SimpleTypeEnum.IntegerType: 
            
            #line default
            #line hidden
            this.Write("\t\t\treturn _value.ToString();\r\n");
            
            #line 59 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
			break; 
		case SimpleTypeEnum.BooleanType: 
            
            #line default
            #line hidden
            this.Write("\t\t\treturn _value ? \"true\" : \"false\";\r\n");
            
            #line 62 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
			break;
		case SimpleTypeEnum.StringType: 
            
            #line default
            #line hidden
            this.Write("\t\t\treturn _value ?? \"\";\r\n");
            
            #line 65 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
			break; 
            
            #line default
            #line hidden
            
            #line 66 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n");
            
            #line 68 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 69 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 69 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingType));
            
            #line default
            #line hidden
            this.Write(" val)\r\n        {\r\n");
            
            #line 71 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 if (IsComplex){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t//copy items into new inner list\r\n\t\t\t_value = new ");
            
            #line 73 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingType));
            
            #line default
            #line hidden
            this.Write("(val);\r\n");
            
            #line 74 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            _value = val;\r\n");
            
            #line 76 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n");
            
            #line 79 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 if (!IsComplex && SimpleType != SimpleTypeEnum.StringType) { //Complex types can't be initialized from string representation

            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 81 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("(string val)\r\n        {\r\n");
            
            #line 83 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 switch(SimpleType){  
		case SimpleTypeEnum.RealType:
		case SimpleTypeEnum.NumberType: 
            
            #line default
            #line hidden
            this.Write("\t\t\t_value = System.Convert.ToDouble(val, System.Globalization.CultureInfo.CreateS" +
                    "pecificCulture(\"en-US\"));\r\n");
            
            #line 87 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
			break; 
		case SimpleTypeEnum.LogicalType: 
            
            #line default
            #line hidden
            this.Write(@"			if (string.Compare(val, ""true"", System.StringComparison.OrdinalIgnoreCase) == 0 || string.Compare(val, "".T."", System.StringComparison.OrdinalIgnoreCase) == 0)
                _value = true;
            else if (string.Compare(val, ""false"", System.StringComparison.OrdinalIgnoreCase) == 0)
                _value = false;
            else
                _value = null;
");
            
            #line 95 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
			break;
		case SimpleTypeEnum.BinaryType: 
		case SimpleTypeEnum.IntegerType: 
            
            #line default
            #line hidden
            this.Write("\t\t\t_value = System.Convert.ToInt64(val);\r\n");
            
            #line 99 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
			break; 
		case SimpleTypeEnum.BooleanType: 
            
            #line default
            #line hidden
            this.Write("\t\t\tif (string.Compare(val, \"true\", System.StringComparison.OrdinalIgnoreCase) == " +
                    "0 || string.Compare(val, \".T.\", System.StringComparison.OrdinalIgnoreCase) == 0)" +
                    "\r\n                _value = true;\r\n            else\r\n                _value = fal" +
                    "se;\r\n");
            
            #line 105 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
			break; 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 107 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n");
            
            #line 109 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n        public static implicit operator ");
            
            #line 111 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 111 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingType));
            
            #line default
            #line hidden
            this.Write(" value)\r\n        {\r\n            return new ");
            
            #line 113 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("(value);\r\n        }\r\n\r\n        public static implicit operator ");
            
            #line 116 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingType));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 116 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write(" obj)\r\n        {\r\n");
            
            #line 118 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 if (IsComplex){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t//return copy so that underlying collection is not exposed\r\n\t\t\treturn new ");
            
            #line 120 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingType));
            
            #line default
            #line hidden
            this.Write("(obj._value);\r\n");
            
            #line 121 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            return obj._value;\r\n");
            
            #line 123 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"
        }


        public override bool Equals(object obj)
        {
			if (obj == null && Value == null)
                return true;

            if (obj == null)
                return false;

            if (GetType() != obj.GetType())
                return false;

");
            
            #line 139 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
	if (!IsComplex) { 
            
            #line default
            #line hidden
            this.Write("            return ((");
            
            #line 140 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write(") obj)._value == _value;\r\n");
            
            #line 141 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
	} else { 
            
            #line default
            #line hidden
            this.Write("            return System.Linq.Enumerable.SequenceEqual(((");
            
            #line 142 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write(") obj)._value, _value);\r\n");
            
            #line 143 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
	} 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n\t\tpublic bool Equals(");
            
            #line 146 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingType));
            
            #line default
            #line hidden
            this.Write(" other)\r\n\t    {\r\n\t        return this == other;\r\n\t    }\r\n\r\n        public static " +
                    "bool operator ==(");
            
            #line 151 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write(" obj1, ");
            
            #line 151 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write(" obj2)\r\n        {\r\n            return Equals(obj1, obj2);\r\n        }\r\n\r\n        p" +
                    "ublic static bool operator !=(");
            
            #line 156 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write(" obj1, ");
            
            #line 156 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write(" obj2)\r\n        {\r\n            return !Equals(obj1, obj2);\r\n        }\r\n\r\n        " +
                    "public override int GetHashCode()\r\n        {\r\n");
            
            #line 163 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
	if (IsComplex) { 
            
            #line default
            #line hidden
            this.Write("            return Value != null ? _value.Sum(o => o.GetHashCode()) : base.GetHas" +
                    "hCode();\r\n");
            
            #line 165 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
	} else { 
            
            #line default
            #line hidden
            this.Write("            return Value != null ? _value.GetHashCode() : base.GetHashCode();\r\n");
            
            #line 167 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
	} 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n\t\t#region ");
            
            #line 170 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PersistInterface));
            
            #line default
            #line hidden
            this.Write(" implementation\r\n\t\tvoid ");
            
            #line 171 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PersistInterface));
            
            #line default
            #line hidden
            this.Write(".Parse(int propIndex, IPropertyValue value, int[] nestedIndex)\r\n\t\t{\r\n\t\t\tif (propI" +
                    "ndex != 0)\r\n\t\t\t\tthrow new XbimParserException(string.Format(\"Attribute index {0}" +
                    " is out of range for {1}\", propIndex + 1, GetType().Name.ToUpper()));\r\n");
            
            #line 175 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
	if (IsComplex) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tif (_value == null)\r\n\t\t\t\t_value = new ");
            
            #line 177 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingType));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 178 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
		if (IsComplexOfEntities) { 
            
            #line default
            #line hidden
            this.Write("            _value.Add(value.");
            
            #line 179 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetPropertyValueMember(Type.Domain)));
            
            #line default
            #line hidden
            this.Write(" as ");
            
            #line 179 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingArrayType));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 180 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
		} else { 
            
            #line default
            #line hidden
            this.Write("            _value.Add(value.");
            
            #line 181 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetPropertyValueMember(Type.Domain)));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 182 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
		} 
            
            #line default
            #line hidden
            
            #line 183 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
	} 
	else { 
            
            #line default
            #line hidden
            this.Write("            _value = value.");
            
            #line 185 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetPropertyValueMember(Type.Domain)));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 186 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
	}
            
            #line default
            #line hidden
            this.Write("            \r\n\t\t}\r\n\r\n\t\tstring ");
            
            #line 189 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PersistInterface));
            
            #line default
            #line hidden
            this.Write(".WhereRule()\r\n\t\t{\r\n            throw new System.NotImplementedException();\r\n\t\t}\r\n" +
                    "\t\t#endregion\r\n\r\n\t\t#region IExpressValueType implementation\r\n        System.Type " +
                    "IExpressValueType.UnderlyingSystemType { \r\n\t\t\tget \r\n\t\t\t{\r\n\t\t\t\treturn typeof(");
            
            #line 199 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnderlyingType));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n\t\t}\r\n\t\t#endregion\r\n\r\n");
            
            #line 204 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 if (IsComplex) { 
            
            #line default
            #line hidden
            this.Write(@"		#region IExpressComplexType implementation
		IEnumerable<object> IExpressComplexType.Properties
        {
            get
            {
				if(_value == null) yield break;
	            foreach (var value in _value)
	                yield return value;
            }
        }
		#endregion
");
            
            #line 216 "C:\CODE\XbimGit\XbimExpress\Xbim.CodeGeneration\Templates\DefinedTypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class DefinedTypeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
