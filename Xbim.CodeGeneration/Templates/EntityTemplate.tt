<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Xbim.CodeGeneration.Helpers" #>
<#@ import namespace="Xbim.ExpressParser.SDAI" #>

<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

namespace <#= Namespace #>
{
	[IndexedClass]
	[ExpressType("<#= Type.PersistanceName #>", <#= Type.TypeId #>)]
	// ReSharper disable once PartialTypeWithSinglePart
	public <#= AbstractKeyword #> partial class @<#= Name #> <#= Inheritance #>
	{
<# if (IsFirst) {#>
		#region Implementation of <#= PersistEntityInterface #>
		public int EntityLabel {get; internal set;}
		
		public <#= ModelInterface #> Model { get; internal set; }
		
		public bool Activated { get; internal set; }

		void <#= PersistEntityInterface #>.Activate(bool write)
		{
			if (Activated) return; //activation can only happen once in a lifetime of the object

			Model.Activate(this, write);
			Activated = true;
		}

		void <#= PersistEntityInterface #>.Activate (Action activation)
		{
			if (Activated) return; //activation can only happen once in a lifetime of the object
			
			activation();
			Activated = true;
		}
		#endregion

<# } #>
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal <#= Name #>(<#= ModelInterface #> model) <# if (!IsFirst) {#>: base(model) <# } #>
		{ 
			Model = model; 
<# foreach (var attribute in AggregatedExplicitAttributes){ #>
			<#= GetPrivateFieldName(attribute) #> = new <#= GetCSType(attribute) #>( this );
<# } #>
		}

<# if (ExplicitAttributes.Any()) {#>
		#region Explicit attribute fields
<# foreach(var attribute in ExplicitAttributes){ #>
		private <#= GetCSType(attribute) #> <#= GetPrivateFieldName(attribute) #>;
<# } #>
		#endregion
	
		#region Explicit attribute properties
<# foreach(var attribute in ExplicitAttributes){ #>
<# if (IsPartOfInverse(attribute)) { #>
		[IndexedProperty]
<# } #>
		[EntityAttribute(<#= GetAttributeOrder(attribute) #>, <#= GetAttributeState(attribute) #>, <#= GetAttributeType(attribute) #>, <#= GetAttributeMemberType(attribute) #>, <#= GetAttributeMinCardinality(attribute) #>, <#= GetAttributeMaxCardinality(attribute) #>)]
		public <#= GetCSType(attribute) #> @<#= attribute.Name #> 
		{ 
			get 
			{
				if(Activated) return <#= GetPrivateFieldName(attribute) #>;
				
				Model.Activate(this, true);
				Activated = true;
				return <#= GetPrivateFieldName(attribute) #>;
			} 
<# if (!(attribute.Domain is AggregationType)) { #>
			set
			{
				SetValue( v =>  <#= GetPrivateFieldName(attribute) #> = v, <#= GetPrivateFieldName(attribute) #>, value,  "<#= attribute.Name #>");
			} 
<# } #>
		}
	
<# } #>
		#endregion
<# } #>

<# if (InverseAttributes.Any()) {#>
		#region Inverse attributes
<# foreach(var attribute in InverseAttributes){  
	var inverseType = attribute.Domain.Name; #>
		[EntityAttribute(<#= GetAttributeOrder(attribute) #>, <#= GetAttributeState(attribute) #>, <#= GetAttributeType(attribute) #>, <#= GetAttributeMemberType(attribute) #>, <#= GetAttributeMinCardinality(attribute) #>, <#= GetAttributeMaxCardinality(attribute) #>)]
<# if (IsEnumeration(attribute)) { #>
		public IEnumerable<<#=inverseType #>> @<#= attribute.Name #> 
<# } else { #>
		public <#=inverseType #> @<#= attribute.Name #> 
<# } #>
		{ 
			get 
			{
<# if (IsDoubleAggregation(attribute)) {#>
				return Model.Instances.<#= IsEnumeration(attribute) ? "Where" : "FirstOrDefault" #><<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> != null &&  e.<#= attribute.InvertedAttr.Name #>.Any( i => i.Contains(this)));
<# } else if (IsAggregation(attribute)){#>
				return Model.Instances.<#= IsEnumeration(attribute) ? "Where" : "FirstOrDefault" #><<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> != null &&  e.<#= attribute.InvertedAttr.Name #>.Contains(this));
<# } else {#>
				return Model.Instances.<#= IsEnumeration(attribute) ? "Where" : "FirstOrDefault" #><<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> == this);
<# } #>
			} 
		}
<# } #>
		#endregion
<# } #>

<# if (IsFirst) { #>
		#region INotifyPropertyChanged implementation
		 
		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName)
		{

			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action doAction = () => setter(newValue);
			Action undoAction = () => setter(oldValue);
			txn.AddReversibleAction(doAction, undoAction, this);
			setter(newValue);
			NotifyPropertyChanged(notifyPropertyName);
		}

		#endregion
<# } #>

		#region <#= PersistInterface #> implementation
		public <#= VirtualOverrideKeyword #> void Parse(int propIndex, IPropertyValue value)
		{
<#	if (AllExplicitAttributes.Any()) { #>
			switch (propIndex)
			{
<#		if (ParentAttributes.Any()){
            foreach (var attribute in ParentAttributes)
            { #>
				case <#= GetAttributeIndex(attribute) #>: 
<#          } #>
					base.Parse(propIndex, value); 
					return;
<#
		}
		foreach (var attribute in ExplicitAttributes) { #>
				case <#= GetAttributeIndex(attribute) #>: 
<#			if (IsEntityOrSelectAggregation(attribute)) { #>
					if (<#= GetPrivateFieldName(attribute) #> == null) <#= GetPrivateFieldName(attribute) #> = new <#= GetCSType(attribute) #>( this );
					<#= GetPrivateFieldName(attribute) #>.InternalAdd((<#= GetAggregationElementType(attribute) #>)value.EntityVal);
					return;
<#				continue;
			} 
			if(attribute.Domain is EntityDefinition || attribute.Domain is SelectType){ #>
					<#= GetPrivateFieldName(attribute) #> = (<#= GetCSType(attribute) #>)(value.EntityVal);
					return;
<#				continue;
			}
			var enumType = attribute.Domain as EnumerationType;
			if(enumType != null){ #>
                    <#= GetPrivateFieldName(attribute) #> = (<#= enumType.Name #>) System.Enum.Parse(typeof (<#= enumType.Name #>), value.EnumVal, true);
					return;
<#			continue;
			}
			if (IsComplexDefinedType(attribute)){
				if(attribute.OptionalFlag) {#>
					if (!<#= GetPrivateFieldName(attribute) #>.HasValue) <#= GetPrivateFieldName(attribute) #> = new <#= GetCSType(attribute) #>();
			        // ReSharper disable once PossibleNullReferenceException
					((IExpressComplexType)<#= GetPrivateFieldName(attribute) #>).Add(value.<#= GetPropertyValueMember(attribute.Domain) #>);
					return;
<#					continue;
                }
				else
                {#>
					((IExpressComplexType)<#= GetPrivateFieldName(attribute) #>).Add(value.<#= GetPropertyValueMember(attribute.Domain) #>);
					return;
<#				}
			}
			if (IsSimpleOrDefinedType(attribute)){#>
					<#= GetPrivateFieldName(attribute) #> = value.<#= GetPropertyValueMember(attribute.Domain) #>;
					return;
<#				continue;
			}
			if (IsSimpleOrDefinedTypeAggregation(attribute)){#>
					if (<#= GetPrivateFieldName(attribute) #> == null) <#= GetPrivateFieldName(attribute) #> = new <#= GetCSType(attribute) #>( this );
					<#= GetPrivateFieldName(attribute) #>.InternalAdd(value.<#= GetPropertyValueMember(attribute.Domain) #>);
					return;
<#				continue;
			}#>
					//this is a special case which has to be handled in a partial class which is not generated.
					//Parse<#= attribute.Name #>(propIndex, value);
					//return;
					throw new System.NotImplementedException("<#= string.Format("{0} in {1} is a special case of nested lists. It is not implemented for now.", attribute.Name, Name) #>");
<#			Console.WriteLine("Parsing code wasn't generated for attribute " + attribute.Name + " of type "+ GetCSType(attribute) +" in entity " + Name);
			
		}#>
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
<#	} else { #>
			//there are no attributes defined for this entity
            throw new System.IndexOutOfRangeException("There are no attributes defined for this entity");
<#	}#>
		}
		
		public <#= VirtualOverrideKeyword #> string WhereRule() 
		{
<# if (WhereRules.Any()) { #>
            throw new System.NotImplementedException();
<# foreach (var rule in WhereRules) {#>
		/*<#= rule.Description #>*/
<# } #>
<# }  else { #>
			return "";
<# } #>
		}
		#endregion
	}
}