<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Xbim.CodeGeneration.Helpers" #>
<#@ import namespace="Xbim.ExpressParser.SDAI" #>

<# foreach(var u in Using) { #>
using <#= u #>;
<# } #>

namespace <#= Namespace #>
{
	[EntityName("<#= Type.PersistanceName #>", <#= Type.TypeId #>)]
	// ReSharper disable once PartialTypeWithSinglePart
	public <#= AbstractKeyword #> partial class @<#= Name #> <#= Inheritance #>
	{
<# if (IsFirst) {#>
		#region Implementation of <#= PersistEntityInterface #>
		public int EntityLabel {get; internal set;}
		
		public <#= ModelInterface #> Model { get; internal set; }
		
		public bool Activated { get; internal set; }

		public void Activate(bool write)
		{
			if (Activated) return; //activation can only happen once in a lifetime of the object

			Model.Activate(this, write);
			Activated = true;
		}

		public void Activate (Action activation)
		{
			activation();
			Activated = true;
		}
		#endregion

<# } #>
		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal <#= Name #>(<#= ModelInterface #> model) <# if (!IsFirst) {#>: base(model) <# } #>
		{ 
			Model = model; 
<# foreach (var attribute in AggregatedExplicitAttributes){ #>
			<#= GetPrivateFieldName(attribute) #> = new <#= GetCSType(attribute) #>( model );
<# } #>
		}

		#region Explicit attribute fields
<# foreach(var attribute in Type.ExplicitAttributes){ #>
		private <#= GetCSType(attribute) #> <#= GetPrivateFieldName(attribute) #>;
<# } #>
		#endregion
	
		#region Explicit attribute properties
<# foreach(var attribute in ExplicitAttributes){ #>
		[EntityAttribute(<#= GetAttributeIndex(attribute) #>, EntityAttributeState.<#= attribute.OptionalFlag ? "Optional" : "Mandatory" #>)]
		public <#= GetCSType(attribute) #> @<#= attribute.Name #> 
		{ 
			get 
			{
				if(Activated) return <#= GetPrivateFieldName(attribute) #>;
				
				Model.Activate(this, true);
				Activated = true;
				return <#= GetPrivateFieldName(attribute) #>;
			} 
			set
			{
				SetValue( v =>  <#= GetPrivateFieldName(attribute) #> = v, <#= GetPrivateFieldName(attribute) #>, value,  "<#= attribute.Name #>");
			} 
		}
	
<# } #>
		#endregion

		#region Inverse attributes
<# foreach(var attribute in InverseAttributes){  
	var inverseType = attribute.Domain.Name; #>
		public IEnumerable<<#=inverseType #>> @<#= attribute.Name #> 
		{ 
			get 
			{
<# if (IsDoubleAggregation(attribute)) {#>
				return Model.Instances.Where<<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> != null &&  e.<#= attribute.InvertedAttr.Name #>.Any( i => i.Contains(this)));
<# } else if (IsAggregation(attribute)){#>
				return Model.Instances.Where<<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> != null &&  e.<#= attribute.InvertedAttr.Name #>.Contains(this));
<# } else {#>
				return Model.Instances.Where<<#= inverseType #>>(e => e.<#= attribute.InvertedAttr.Name #> == this);
<# } #>
			} 
		}
	
<# } #>

		#endregion
<# if (IsFirst) { #>

		#region INotifyPropertyChanged implementation
		 
		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName)
		{

			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action undo = () => setter(oldValue);
			txn.AddReversibleAction(undo);
			setter(newValue);
			NotifyPropertyChanged(notifyPropertyName);
		}

		#endregion
<# } #>
<# if (!IsAbstract) { #>

		#region Index access
		private static readonly List<string> AttributeNames = new List<string>
		{
<# foreach(var attribute in AllExplicitAttributes){ #>
			"<#= attribute.Name #>",
<# } #>
		};

		IEnumerable<string> <#= InstantiableInterface #>.PropertyNames { get { return AttributeNames; } }

		object <#= InstantiableInterface #>.GetValue(int index)
		{
			switch(index)
			{
<# foreach(var attribute in AllExplicitAttributes){ #>
				case <#= GetAttributeIndex(attribute) #>: 
					return @<#= attribute.Name #>;
<# } #>
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		object <#= InstantiableInterface #>.GetValue(string name)
		{
			switch(name)
			{
<# foreach(var attribute in AllExplicitAttributes){ #>
				case "<#= attribute.Name #>":  
					return @<#= attribute.Name #>;
<# } #>
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void <#= InstantiableInterface #>.SetValue(int index, object value)
		{
			switch(index)
			{
<# foreach(var attribute in AllExplicitAttributes){ #>
				case <#= GetAttributeIndex(attribute) #>:
<#		if (IsReferenceTypeAggregation(attribute)) {#>
					 @<#= attribute.Name #>.Add((<#= GetAggregationElementType(attribute) #>)value);
<#		} else if (IsValueTypeAggregation(attribute)) {#>
					 @<#= attribute.Name #>.Add((<#= GetAggregationElementType(attribute) #>)value);
<#		} else if (IsReferenceType(attribute)) {#>
					 @<#= attribute.Name #> = (<#= GetCSType(attribute) #>)value;
<#		} else {#>
					 if (value != null) @<#= attribute.Name #> = (<#= GetCSType(attribute) #>)value;
<#		} #>
					 break;
<# } #>
				default:
					throw new System.IndexOutOfRangeException();
			}
		}

		void <#= InstantiableInterface #>.SetValue(string propName, object value)
		{
			switch(propName)
			{
<# foreach(var attribute in AllExplicitAttributes){ #>
				case "<#= attribute.Name #>":
<#		if (IsReferenceTypeAggregation(attribute)) {#>
					 @<#= attribute.Name #>.Add((<#= GetAggregationElementType(attribute) #>)value);
<#		} else if (IsValueTypeAggregation(attribute)) {#>
					 @<#= attribute.Name #>.Add((<#= GetAggregationElementType(attribute) #>)value);
<#		} else if (IsReferenceType(attribute)) {#>
					 @<#= attribute.Name #> = (<#= GetCSType(attribute) #>)value;
<#		} else {#>
					 if (value != null) @<#= attribute.Name #> = (<#= GetCSType(attribute) #>)value;
<#		} #>
					 break;
<# } #>
				default:
					throw new System.IndexOutOfRangeException();
			}
		}
		#endregion
<# } #>



		#region <#= PersistInterface #> implementation
		public <#= VirtualOverrideKeyword #> void Parse(int propIndex, IPropertyValue value)
		{
<#	if (AllExplicitAttributes.Any()) { #>
			switch (propIndex)
			{
<#		if (ParentAttributes.Any()){
            foreach (var attribute in ParentAttributes)
            { #>
				case <#= GetAttributeIndex(attribute) #>: 
<#          } #>
					base.Parse(propIndex, value); 
					return;
<#
		}
		foreach (var attribute in ExplicitAttributes) { #>
				case <#= GetAttributeIndex(attribute) #>: 
<#			if (IsEntityOrSelectAggregation(attribute)) { #>
					if (<#= GetPrivateFieldName(attribute) #> == null) <#= GetPrivateFieldName(attribute) #> = new <#= GetCSType(attribute) #>( Model );
					<#= GetPrivateFieldName(attribute) #>.Add((<#= GetAggregationElementType(attribute) #>)value.EntityVal);
					return;
<#				continue;
			} 
			if(attribute.Domain is EntityDefinition || attribute.Domain is SelectType){ #>
					<#= GetPrivateFieldName(attribute) #> = (<#= GetCSType(attribute) #>)(value.EntityVal);
					return;
<#				continue;
			}
			var enumType = attribute.Domain as EnumerationType;
			if(enumType != null){ #>
                    <#= GetPrivateFieldName(attribute) #> = (<#= enumType.Name #>) System.Enum.Parse(typeof (<#= enumType.Name #>), value.EnumVal, true);
					return;
<#			continue;
			}
			if (IsComplexDefinedType(attribute)){
				if(attribute.OptionalFlag) {#>
					if (!<#= GetPrivateFieldName(attribute) #>.HasValue) <#= GetPrivateFieldName(attribute) #> = new <#= GetCSType(attribute) #>();
			        // ReSharper disable once PossibleNullReferenceException
					((IExpressComplexType)<#= GetPrivateFieldName(attribute) #>).Add(value.<#= GetPropertyValueMember(attribute.Domain) #>);
					return;
<#					continue;
                }
				else
                {#>
					((IExpressComplexType)<#= GetPrivateFieldName(attribute) #>).Add(value.<#= GetPropertyValueMember(attribute.Domain) #>);
					return;
<#				}
			}
			if (IsSimpleOrDefinedType(attribute)){#>
					<#= GetPrivateFieldName(attribute) #> = value.<#= GetPropertyValueMember(attribute.Domain) #>;
					return;
<#				continue;
			}
			if (IsSimpleOrDefinedTypeAggregation(attribute)){#>
					if (<#= GetPrivateFieldName(attribute) #> == null) <#= GetPrivateFieldName(attribute) #> = new <#= GetCSType(attribute) #>( Model );
					<#= GetPrivateFieldName(attribute) #>.Add(value.<#= GetPropertyValueMember(attribute.Domain) #>);
					return;
<#				continue;
			}

			throw new System.NotImplementedException("Parsing code wasn't generated for attribute " + attribute.Name + " in entity " + Name);
			
		}#>
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
<#	} else { #>
			//there are no attributes defined for this entity
            throw new System.IndexOutOfRangeException("There are no attributes defined for this entity");
<#	}#>
		}
		
		public <#= VirtualOverrideKeyword #> string WhereRule() 
		{
<# if (WhereRules.Any()) { #>
            throw new System.NotImplementedException();
<# foreach (var rule in WhereRules) {#>
		/*<#= rule.Description #>*/
<# } #>
<# }  else { #>
			return "";
<# } #>
		}
		#endregion

		
	}
}