using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Build.Construction;
using Xbim.CodeGeneration.Settings;
using Xbim.CodeGeneration.Templates;
using Xbim.CodeGeneration.Templates.Infrastructure;
using Xbim.ExpressParser.SDAI;

namespace Xbim.CodeGeneration
{
    public class Generator
    {
        public GeneratorSettings Settings { get; private set; }
        public SchemaModel SchemaModel { get; private set; }

        private ProjectItemGroupElement _includeItemGroupElement;

        public Generator(GeneratorSettings settings, SchemaModel schema)
        {
            Settings = settings;
            SchemaModel = schema;
        }

        public bool Generate()
        {
            var path = Settings.OutputPath ?? "";
            if (!String.IsNullOrWhiteSpace(path))
                Environment.CurrentDirectory = path;

            if (Directory.Exists(path))
            {
                var projFile = Directory.EnumerateFiles(path, "*.csproj", SearchOption.TopDirectoryOnly).FirstOrDefault();
                if(projFile != null)
                    OpenProject(projFile);
                else
                    InitProject();
            }
            else
                InitProject();


            foreach (var tmpl in SchemaModel.Get<DefinedType>().Select(type => new DefinedTypeTemplate(Settings, type)))
                ProcessTemplate(tmpl);

            foreach (var tmpl in SchemaModel.Get<SelectType>().Select(type => new SelectTypeTemplate(Settings, type)))
                ProcessTemplate(tmpl);

            foreach (var tmpl in SchemaModel.Get<EntityDefinition>().Select(type => new EntityTemplate(Settings, type)))
                ProcessTemplate(tmpl);

            foreach (var tmpl in SchemaModel.Get<EnumerationType>().Select(type => new EnumerationTemplate(Settings, type)))
                ProcessTemplate(tmpl);

            _includeItemGroupElement.ContainingProject.Save();

            return true;
        }

        private void WriteHeader(ICodeTemplate template)
        {
            template.WriteLine("// ------------------------------------------------------------------------------");
            template.WriteLine("// <auto-generated>");
            template.WriteLine("//     This code was generated by a tool Xbim.CodeGeneration from EXPRESS schema instance {0}.", SchemaModel.Schema.Name);
            template.WriteLine("//		{0}", DateTime.Now.ToString(CultureInfo.InvariantCulture));
            template.WriteLine("//  ");
            template.WriteLine("//     Changes to this file may cause incorrect behaviour and will be lost if");
            template.WriteLine("//     the code is regenerated.");
            template.WriteLine("// </auto-generated>");
            template.WriteLine("// ------------------------------------------------------------------------------");
        }

        private void ProcessTemplate(ICodeTemplate template)
        {
            var path = Path.Combine(template.Namespace.Split('.'));
            if (!Directory.Exists(path))
                Directory.CreateDirectory(path);

            path = Path.Combine(path, template.Name + ".cs");

            using (var file = File.CreateText(path))
            {
                WriteHeader(template);
                var code = template.TransformText();
                file.Write(code);
                file.Close();

                //add file to the project if it is not there already
                AddCompilationItem(path);
            }
            

        }

        private void InitProject()
        {
            var name = SchemaModel.Schema.Name;
            var tmpl = new CSProjectTemplate(name);
            var data = tmpl.TransformText();
            var fileName = name + ".csproj";

            using (var w = File.CreateText(fileName))
            {
                w.Write(data);
                w.Close();
            }

            OpenProject(fileName);
            
        }

        private void OpenProject(string path)
        {
            var projElement = ProjectRootElement.Open(path);

            if(projElement == null)
                throw new Exception("Failed to open existing CS project: " + path);

            // items to compile
            _includeItemGroupElement = projElement.ItemGroups.FirstOrDefault(g => g.Items.All(i => i.ItemType == "Compile")) ??
                                       projElement.AddItemGroup();
        }

        private void AddCompilationItem(string item)
        {
                _includeItemGroupElement.AddItem("Compile", item);
        }

        private void AddProjectItems(ProjectRootElement elem, string groupName, params string[] items)
        {
            var group = elem.AddItemGroup();
            foreach (var item in items)
            {
                group.AddItem(groupName, item);
            }
        }
    }
}
